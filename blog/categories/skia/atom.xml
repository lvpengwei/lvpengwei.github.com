<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Skia | lvpengwei’s Blog]]></title>
  <link href="http://lvpengwei.github.io//blog/categories/skia/atom.xml" rel="self"/>
  <link href="http://lvpengwei.github.io//"/>
  <updated>2023-04-25T22:59:31+08:00</updated>
  <id>http://lvpengwei.github.io//</id>
  <author>
    <name><![CDATA[lvpengwei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tgfx 实现 Blend]]></title>
    <link href="http://lvpengwei.github.io//blog/2023/04/25/tgfxshi-xian-blend/"/>
    <updated>2023-04-25T22:24:31+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2023/04/25/tgfxshi-xian-blend</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>PAG 文件里的混合模式是从 AE 中导出的，然后使用 skia 内置的混合模式去实现，去掉 skia 之后，需要用原生的 OpenGL 来实现。</p>

<h2>思路</h2>

<p>既然 skia 内置的混合模式可以满足需求，那我们用 OpenGL 实现 skia 支持的就好，先看一下 skia 里面都有哪些混合模式。
<code>cpp
enum class SkBlendMode {  
  kClear, //!&lt; replaces destination with zero: fully transparent  
  kSrc, //!&lt; replaces destination  
  kDst, //!&lt; preserves destination  
  kSrcOver, //!&lt; source over destination  
  kDstOver, //!&lt; destination over source  
  kSrcIn, //!&lt; source trimmed inside destination  
  kDstIn, //!&lt; destination trimmed by source  
  kSrcOut, //!&lt; source trimmed outside destination  
  kDstOut, //!&lt; destination trimmed outside source  
  kSrcATop, //!&lt; source inside destination blended with destination  
  kDstATop, //!&lt; destination inside source blended with source  
  kXor, //!&lt; each of source and destination trimmed outside the other  
  kPlus, //!&lt; sum of colors  
  kModulate, //!&lt; product of premultiplied colors; darkens destination  
  kScreen, //!&lt; multiply inverse of pixels, inverting result; brightens destination  
  kLastCoeffMode = kScreen, //!&lt; last porter duff blend mode  
  kOverlay, //!&lt; multiply or screen, depending on destination  
  kDarken, //!&lt; darker of source and destination  
  kLighten, //!&lt; lighter of source and destination  
  kColorDodge, //!&lt; brighten destination to reflect source  
  kColorBurn, //!&lt; darken destination to reflect source  
  kHardLight, //!&lt; multiply or screen, depending on source  
  kSoftLight, //!&lt; lighten or darken, depending on source  
  kDifference, //!&lt; subtract darker from lighter with higher contrast  
  kExclusion, //!&lt; subtract darker from lighter with lower contrast  
  kMultiply, //!&lt; multiply source with destination, darkening image  
  kLastSeparableMode = kMultiply, //!&lt; last blend mode operating separately on components  
  kHue, //!&lt; hue of source with saturation and luminosity of destination  
  kSaturation, //!&lt; saturation of source with hue and luminosity of destination  
  kColor, //!&lt; hue and saturation of source with luminosity of destination  
  kLuminosity, //!&lt; luminosity of source with hue and saturation of destination  
  kLastMode = kLuminosity, //!&lt; last valid value  
};
</code>
<img src="/images/20230425/blend.png" alt="blend mode" /></p>

<p>从实现方案上来说，这些混合模式都可以用 shader 来完成。其中<code>kLastCoeffMode</code>以上的混合模式也叫 <a href="https://zh.wikipedia.org/wiki/Alpha%E5%90%88%E6%88%90">PorterDuff 混合模式</a>，它们还可以用 OpenGL 提供的 <code>glBlendFunc</code>来实现 。</p>

<h2>解决</h2>

<h3>coeff blend mode</h3>

<p><code>kLastCoeffMode</code>以上的比较容易，在渲染之前把对应的参数设置好就行。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">static</span> <span class="k">constexpr</span> <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Blend</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">unsigned</span><span class="p">,</span> <span class="kt">unsigned</span><span class="o">&gt;&gt;</span> <span class="n">kBlendCoeffMap</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Blend</span><span class="o">::</span><span class="n">Clear</span><span class="p">,</span> <span class="p">{</span><span class="n">GL_ZERO</span><span class="p">,</span> <span class="n">GL_ZERO</span><span class="p">}},</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Blend</span><span class="o">::</span><span class="n">Src</span><span class="p">,</span> <span class="p">{</span><span class="n">GL_ONE</span><span class="p">,</span> <span class="n">GL_ZERO</span><span class="p">}},</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Blend</span><span class="o">::</span><span class="n">Dst</span><span class="p">,</span> <span class="p">{</span><span class="n">GL_ZERO</span><span class="p">,</span> <span class="n">GL_ONE</span><span class="p">}},</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Blend</span><span class="o">::</span><span class="n">SrcOver</span><span class="p">,</span> <span class="p">{</span><span class="n">GL_ONE</span><span class="p">,</span> <span class="n">GL_ONE_MINUS_SRC_ALPHA</span><span class="p">}},</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Blend</span><span class="o">::</span><span class="n">DstOver</span><span class="p">,</span> <span class="p">{</span><span class="n">GL_ONE_MINUS_DST_ALPHA</span><span class="p">,</span> <span class="n">GL_ONE</span><span class="p">}},</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Blend</span><span class="o">::</span><span class="n">SrcIn</span><span class="p">,</span> <span class="p">{</span><span class="n">GL_DST_ALPHA</span><span class="p">,</span> <span class="n">GL_ZERO</span><span class="p">}},</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Blend</span><span class="o">::</span><span class="n">DstIn</span><span class="p">,</span> <span class="p">{</span><span class="n">GL_ZERO</span><span class="p">,</span> <span class="n">GL_SRC_ALPHA</span><span class="p">}},</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Blend</span><span class="o">::</span><span class="n">SrcOut</span><span class="p">,</span> <span class="p">{</span><span class="n">GL_ONE_MINUS_DST_ALPHA</span><span class="p">,</span> <span class="n">GL_ZERO</span><span class="p">}},</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Blend</span><span class="o">::</span><span class="n">DstOut</span><span class="p">,</span> <span class="p">{</span><span class="n">GL_ZERO</span><span class="p">,</span> <span class="n">GL_ONE_MINUS_SRC_ALPHA</span><span class="p">}},</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Blend</span><span class="o">::</span><span class="n">SrcATop</span><span class="p">,</span> <span class="p">{</span><span class="n">GL_DST_ALPHA</span><span class="p">,</span> <span class="n">GL_ONE_MINUS_SRC_ALPHA</span><span class="p">}},</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Blend</span><span class="o">::</span><span class="n">DstATop</span><span class="p">,</span> <span class="p">{</span><span class="n">GL_ONE_MINUS_DST_ALPHA</span><span class="p">,</span> <span class="n">GL_SRC_ALPHA</span><span class="p">}},</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Blend</span><span class="o">::</span><span class="n">Xor</span><span class="p">,</span> <span class="p">{</span><span class="n">GL_ONE_MINUS_DST_ALPHA</span><span class="p">,</span> <span class="n">GL_ONE_MINUS_SRC_ALPHA</span><span class="p">}},</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Blend</span><span class="o">::</span><span class="n">Plus</span><span class="p">,</span> <span class="p">{</span><span class="n">GL_ONE</span><span class="p">,</span> <span class="n">GL_ONE</span><span class="p">}},</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Blend</span><span class="o">::</span><span class="n">Modulate</span><span class="p">,</span> <span class="p">{</span><span class="n">GL_ZERO</span><span class="p">,</span> <span class="n">GL_SRC_COLOR</span><span class="p">}},</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">Blend</span><span class="o">::</span><span class="n">Screen</span><span class="p">,</span> <span class="p">{</span><span class="n">GL_ONE</span><span class="p">,</span> <span class="n">GL_ONE_MINUS_SRC_COLOR</span><span class="p">}}};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">glEnable</span><span class="p">(</span><span class="n">GL_BLEND</span><span class="p">);</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">glBlendFunc</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="n">second</span><span class="p">);</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">glBlendEquation</span><span class="p">(</span><span class="n">GL_FUNC_ADD</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>shader blend mode</h3>

<p>用 shader 实现混合模式，我们需要在 shader 中访问当前  frame buffer 上的颜色分量，OpenGL 有一些 extension 提供了 frame buffer fetch 的功能，如下表所示。</p>

<table>
   <tr>
      <td>extension</td>
      <td>color name</td>
   </tr>
    <tr>
      <td>GL_EXT_shader_framebuffer_fetch</td>
      <td>gl_LastFragData[0]</td>
   </tr>
   <tr>
      <td>GL_NV_shader_framebuffer_fetch</td>
      <td>gl_LastFragData[0]</td>
   </tr>
   <tr>
      <td>GL_ARM_shader_framebuffer_fetch</td>
      <td>gl_LastFragColorARM</td>
   </tr>
</table>


<p><br/></p>

<p>如果当前的 OpenGL 没有提供这些 extension，我们还有一个兜底措施，把这个 frame buffer 的内容复制到一个纹理(<code>dstTexture</code>)上，再把纹理传入 shader。</p>

<p><img src="/images/20230425/blend_dst_texture.png" alt="" /></p>

<p>当然我们不需要把完整的 frame buffer 内容复制一份，因为我们的绘制区域可能只是局部。</p>

<p>复制局部 frame buffer 内容到纹理上，我们使用的是<code>glCopyTexSubImage2D</code>。这里还有一些其他的方式，比如<code>glBlitFramebuffer</code>，用这个的话，需要多创建一个 frame buffer，没有前一个方便和高效。</p>

<p>如果当前 frame buffer 已经绑定了一个纹理，而且当前的 OpenGL 也支持 <code>glTextureBarrier</code>，可以直接把这个绑定的纹理传入 shader，不过在绘制之前要调用一下<code>glTextureBarrier</code>。</p>

<h2>shader 公式</h2>

<p>skia 的 shader 公式来源是 <a href="https://www.w3.org/TR/compositing-1/#advancedcompositing">w3c - Advanced compositing features</a> 的文档。</p>

<blockquote><p>注意：公式里的 RGB 是 Premultiplied 还是 Unpremultiplied。</p></blockquote>

<p>D2D 也有一份 <a href="https://docs.microsoft.com/en-us/windows/win32/direct2d/blend">blend</a> 公式。这两份基本是一样的，w3c 的更全一点。</p>

<h2>总结</h2>

<p>实现混合模式的整个过程，主要就是用 shader 实现的那部分比较复杂，因为需要考虑 OpenGL 的兼容性。</p>

<h2>链接</h2>

<p><a href="https://github.com/google/skia">skia</a><br/>
<a href="https://stackoverflow.com/questions/23981016/best-method-to-copy-texture-to-texture">best method to copy texture to texture</a><br/>
<a href="https://stackoverflow.com/questions/38534694/opengl-reading-from-a-texture-unit-currently-bound-to-a-framebuffer">OpenGL Reading from a texture unit currently bound to a framebuffer</a><br/>
<a href="https://skia.org/docs/user/api/skblendmode_overview/">SkBlendMode Overview</a><br/>
<a href="https://www.w3.org/TR/compositing-1/#advancedcompositing">w3c - Advanced compositing features</a><br/>
<a href="https://docs.microsoft.com/en-us/windows/win32/direct2d/blend">D2D - blend</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PAG 去掉 Skia 后如何渲染 Path]]></title>
    <link href="http://lvpengwei.github.io//blog/2023/04/24/pag-qu-diao-skia-hou-ru-he-xuan-ran-path/"/>
    <updated>2023-04-24T21:37:16+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2023/04/24/pag-qu-diao-skia-hou-ru-he-xuan-ran-path</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>在 2D 绘图库中，path 绘制是很重要的一块。</p>

<h2>思路</h2>

<p>当我们要实现这一块的时候，优先想到的方案是封装一层接口，然后用平台侧的 API 去实现 path 的编辑和绘制，我们再提交到 OpenGL 去上屏。</p>

<p>但是经过调研发现，iOS 和 Mac 的 CGPath、web 的 Path2D 都没有实现类似 skia 的 <a href="https://api.skia.org/SkPathOps_8h.html#a3db3691847c3c9828e0c141e275b8ec2">path-ops</a>  功能；Android 因为背后就是 skia，所以它的 API 和 skia 基本保持一致；在 linux 平台，没有找到合适的 path 编辑库。</p>

<p>然后发现 skia 有一个 module 叫 <a href="https://skia.org/docs/user/modules/pathkit/">PathKit</a>，可以把 skia 的 Path 编辑部分编译成
wasm 提供给 web 使用，渲染时把 SkPath 转成 Path2D 或者直接调用 web-canvas 的 path 接口。因为之前看过 rlottie 使用 freetype 来渲染 path，所以如果 SkPath 能转成 FTOutline，那么全平台的 path 渲染都可以用 freetype 来实现。</p>

<p>调研之后得出结论是 OK 的。</p>

<p>因为 freetype 会增加包大小，而且在 iOS 和 web 平台，用 freetype 没法使用系统字体，所以我们决定 path 编辑部分都使用 SkPath，渲染部分 iOS 和 Mac 用 CoreGraphics，web 平台使用 canvas，其他平台因为文字解析需要使用 freetype，就统一用 freetype 来渲染 path。</p>

<table>
   <tr>
      <td>平台</td>
      <td>path 渲染</td>
   </tr>
    <tr>
      <td>iOS & Mac</td>
      <td>CoreGraphics</td>
   </tr>
   <tr>
      <td>Android</td>
      <td>freetype</td>
   </tr>
   <tr>
      <td>linux</td>
      <td>freetype</td>
   </tr>
   <tr>
      <td>windows</td>
      <td>freetype</td>
   </tr>
   <tr>
      <td>web</td>
      <td>canvas</td>
   </tr>
</table>


<p>在把 <code>SkPath</code> 转成 <code>FT_Outline</code> 时，要注意 <code>FT_Outline</code> 的 <code>n_contours</code> 和 <code>n_points</code> 是 <code>short</code> 类型，所以一个 <code>SkPath</code> 可能会转成多个 <code>FT_Outline</code>。</p>

<h2>pathkit</h2>

<p>提取出来的代码我们作为第三方库 <a href="https://github.com/libpag/pathkit">pathkit</a> 来引入。</p>

<h2>GPU 加速</h2>

<p>skia 的 path 绘制有一部分是使用 GPU 加速的，而我们实现的是 CPU 绘制再提交到 GPU。</p>

<p>我们去调研了一下，这么多年以来，path 的绘制都是依赖 CPU 去实现的，GPU 在发展的过程中并没有考虑这个问题。Khronos 有一个硬件加速矢量绘制的标准 API，叫 <a href="https://zh.wikipedia.org/wiki/OpenVG">OpenVG</a> ，但是没有普及起来。Nvidia 提供了 <a href="https://developer.nvidia.cn/gpu-accelerated-path-rendering">GPU Accelerated Path Rendering</a> ，也没有普及起来。而且不是所有的 path 都适合用 GPU 加速。</p>

<p>所以我们现阶段的方案是简单图形比如矩形、椭圆、圆等等，用 GPU 加速，复杂 path 比较少用，实现起来也比较麻烦，可以后续参考 skia 再支持 GPU 渲染。</p>

<h2>链接</h2>

<p><a href="https://github.com/google/skia">skia</a><br/>
<a href="https://api.skia.org/SkPathOps_8h.html#a3db3691847c3c9828e0c141e275b8ec2">path-ops</a><br/>
<a href="https://skia.org/docs/user/modules/pathkit/">PathKit</a><br/>
<a href="https://github.com/Samsung/rlottie">rlottie</a><br/>
<a href="https://developer.apple.com/documentation/coregraphics/cgpath">CoreGraphics-CGPath</a><br/>
<a href="https://developer.apple.com/documentation/coregraphics/cgcontext">CoreGraphics-CGContext</a><br/>
<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Path2D">web-Path2D</a><br/>
<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial">web-Canvas</a><br/>
<a href="https://on-demand.gputechconf.com/gtc/2012/presentations/S0024-GPU-Accelerated-Path-Rendering.pdf">GPU-Accelerated-Path-Rendering</a><br/>
<a href="https://news.ycombinator.com/item?id=9259910">GPU-accelerated Path Rendering (2012) [pdf]</a><br/>
<a href="https://softwareengineering.stackexchange.com/questions/191472/why-have-hardware-accelerated-vector-graphics-not-taken-off">why have hardware accelerated vector graphics not taken off</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[纹理边缘抗锯齿 CoverageAA]]></title>
    <link href="http://lvpengwei.github.io//blog/2021/12/11/wen-li-bian-yuan-kang-ju-chi-coverage-aa/"/>
    <updated>2021-12-11T12:30:34+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2021/12/11/wen-li-bian-yuan-kang-ju-chi-coverage-aa</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>用 OpenGL 旋转图片的时候，图片边缘会出现锯齿。</p>

<p>图 1 是没有做抗锯齿的时候，可以明显看到边缘的锯齿。</p>

<div align=center>
<img src="http://lvpengwei.github.io//images/20211211/aa_pag_none.png" width="500"/>
<br/>
图 1
</div>


<h2>思路</h2>

<p>首先想到的是 OpenGL 提供的 MSAA，但是 MSAA 占用内存比较多。然后去查了下 skia 的抗锯齿是如何实现的，发现它只是对图片边缘的 1px 做一个 alpha 从 1->0 渐变的遮罩。</p>

<p>如图 2 所示，矩形 abcd 是我们要绘制的区域，根据矩形的坐标向内缩 0.5px 得到矩形 P0_P1_P3_P2，向外扩 0.5px 得到矩形 P4_P5_P7_P6。内矩形里面 alpha 都是 1，外矩形边缘 alpha 都是 0，内矩形和外矩形之间 alpha 从 1->0 渐变。这样我们就对边缘做了一个逐渐消失的效果，从视觉上看，边缘的锯齿就没那么明显了。</p>

<div align=center>
<img src="http://lvpengwei.github.io//images/20211211/CoverageAA _1_.png" width="500"/>
<br/>
图 2
</div>


<h2>解决</h2>

<h3>没有抗锯齿</h3>

<p>在没有使用抗锯齿时，我们绘制一个矩形，提交的是 cdba 4 个顶点，2 个三角形。
<code>cpp
auto bounds = args.rectToDraw;  
auto normalBounds = Rect::MakeLTRB(0, 0, 1, 1);
return {  
  bounds.right, bounds.bottom, normalBounds.right, normalBounds.bottom,  
  bounds.right, bounds.top, normalBounds.right, normalBounds.top,  
  bounds.left, bounds.bottom, normalBounds.left, normalBounds.bottom,  
  bounds.left, bounds.top, normalBounds.left, normalBounds.top,  
};
</code>
对应的绘制命令是
<code>cpp
gl-&gt;drawArrays(GL_TRIANGLE_STRIP, 0, 4);
</code></p>

<h3>抗锯齿 CoverageAA</h3>

<p>在使用 CoverageAA 抗锯齿时，我们绘制一个矩形，提交的是内矩形 P0P1P2P3 和外矩形 P4P5P6P7 的 8 个顶点：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">auto</span> <span class="n">bounds</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">rectToDraw</span><span class="p">;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">normalBounds</span> <span class="o">=</span> <span class="n">Rect</span><span class="o">::</span><span class="n">MakeLTRB</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">auto</span> <span class="n">padding</span> <span class="o">=</span> <span class="mf">0.5f</span><span class="p">;</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">insetBounds</span> <span class="o">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">makeInset</span><span class="p">(</span><span class="n">padding</span><span class="p">,</span> <span class="n">padding</span><span class="p">);</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">outsetBounds</span> <span class="o">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">makeOutset</span><span class="p">(</span><span class="n">padding</span><span class="p">,</span> <span class="n">padding</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">auto</span> <span class="n">normalPadding</span> <span class="o">=</span> <span class="n">Point</span><span class="o">::</span><span class="n">Make</span><span class="p">(</span><span class="n">padding</span> <span class="o">/</span> <span class="n">bounds</span><span class="p">.</span><span class="n">width</span><span class="p">(),</span> <span class="n">padding</span> <span class="o">/</span> <span class="n">bounds</span><span class="p">.</span><span class="n">height</span><span class="p">());</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">normalInset</span> <span class="o">=</span> <span class="n">normalBounds</span><span class="p">.</span><span class="n">makeInset</span><span class="p">(</span><span class="n">normalPadding</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">normalPadding</span><span class="p">.</span><span class="n">y</span><span class="p">);</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">normalOutset</span> <span class="o">=</span> <span class="n">normalBounds</span><span class="p">.</span><span class="n">makeOutset</span><span class="p">(</span><span class="n">normalPadding</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">normalPadding</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="p">{</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="n">insetBounds</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">insetBounds</span><span class="p">.</span><span class="n">top</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">,</span> <span class="n">normalInset</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">normalInset</span><span class="p">.</span><span class="n">top</span><span class="p">,</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="n">insetBounds</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">insetBounds</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">,</span> <span class="n">normalInset</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">normalInset</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="n">insetBounds</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">insetBounds</span><span class="p">.</span><span class="n">top</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">,</span> <span class="n">normalInset</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">normalInset</span><span class="p">.</span><span class="n">top</span><span class="p">,</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="n">insetBounds</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">insetBounds</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">,</span> <span class="n">normalInset</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">normalInset</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="n">outsetBounds</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">outsetBounds</span><span class="p">.</span><span class="n">top</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="n">normalOutset</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">normalOutset</span><span class="p">.</span><span class="n">top</span><span class="p">,</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="n">outsetBounds</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">outsetBounds</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="n">normalOutset</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">normalOutset</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="n">outsetBounds</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">outsetBounds</span><span class="p">.</span><span class="n">top</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="n">normalOutset</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">normalOutset</span><span class="p">.</span><span class="n">top</span><span class="p">,</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="n">outsetBounds</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">outsetBounds</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="n">normalOutset</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">normalOutset</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">转换成三角形是</span> <span class="mi">30</span> <span class="err">个顶点，下面是三角形的</span> <span class="n">index</span> <span class="err">数据</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">cpp</span>
</span><span class='line'><span class="k">static</span> <span class="k">constexpr</span> <span class="kt">int</span> <span class="n">kIndicesPerAAFillRect</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">constexpr</span> <span class="kt">uint16_t</span> <span class="n">gFillAARectIdx</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">绘制命令是</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">cpp</span>
</span><span class='line'><span class="n">glDrawElements</span><span class="p">(</span><span class="n">GL_TRIANGLES</span><span class="p">,</span> <span class="n">kIndicesPerAAFillRect</span><span class="p">,</span> <span class="n">GL_UNSIGNED_SHORT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>结果</h2>

<p>图 3 是做完抗锯齿的效果，可以看到边缘的锯齿已经没有了。</p>

<div align=center>
<img src="http://lvpengwei.github.io//images/20211211/aa_pag.png" width="500"/>
<br/>
图 3
</div>


<p>图 4 是图 1 和 图 3 边缘对比的细节，可以看到边缘像素的过渡圆滑了很多。</p>

<div align=center>
<img src="http://lvpengwei.github.io//images/20211211/detail.png" width="500"/>
<br/>
图 4
</div>


<h2>链接</h2>

<p><a href="https://github.com/google/skia">skia</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS NV12转SkImage颜色不正常的问题]]></title>
    <link href="http://lvpengwei.github.io//blog/2020/03/07/ios-nv12zhuan-skimageyan-se-bu-zheng-chang-de-wen-ti/"/>
    <updated>2020-03-07T11:01:32+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2020/03/07/ios-nv12zhuan-skimageyan-se-bu-zheng-chang-de-wen-ti</id>
    <content type="html"><![CDATA[<h1>环境</h1>

<p>设备：iPhone 6s<br/>
系统：13.1<br/>
Skia版本：m62<br/>
视频的YUV ColorSpace：ITU-R BT.601</p>

<h1>现象</h1>

<p>VideoToolbox 配置的 pixelFormat 是<code>kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange</code>，然后把输出的 pixelBuffer 用下面的代码片段1转成 NV12，再使用代码片段2转成 SkImage，在 SkCanvas 上 draw 出来如图1，视频原图如图2。</p>

<pre><code class="objc">uint32_t pixelFormatType = kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange;
</code></pre>

<pre><code class="objc">// 代码片段1
// Y 数据
CVOpenGLESTextureCacheCreateTextureFromImage(kCFAllocatorDefault,
                                             textCache,
                                             pixelBuffer,
                                             NULL,
                                             GL_TEXTURE_2D,
                                             GL_LUMINANCE,
                                             width,
                                             height,
                                             GL_LUMINANCE,
                                             GL_UNSIGNED_BYTE,
                                             0,
                                             &amp;outputTextureLuma);
// UV 数据
CVOpenGLESTextureCacheCreateTextureFromImage(kCFAllocatorDefault,
                                             textCache,
                                             pixelBuffer,
                                             NULL,
                                             GL_TEXTURE_2D,
                                             GL_LUMINANCE_ALPHA,
                                             width / 2,
                                             height / 2,
                                             GL_LUMINANCE_ALPHA,
                                             GL_UNSIGNED_BYTE,
                                             1,
                                             &amp;outputTextureChroma);
</code></pre>

<pre><code class="cpp">// 代码片段2
GrGLTextureInfo textureInfo1 = {videoImage-&gt;textureTarget(), videoImage-&gt;getTextureID(0)};
GrGLTextureInfo textureInfo2 = {videoImage-&gt;textureTarget(), videoImage-&gt;getTextureID(1)};
GrBackendObject nv12TextureHandles[] = {reinterpret_cast&lt;GrBackendObject&gt;(&amp;textureInfo1),
                                        reinterpret_cast&lt;GrBackendObject&gt;(&amp;textureInfo2)};
SkISize nv12Sizes[] = \{\{videoImage-&gt;width(), videoImage-&gt;height()\},
                       \{videoImage-&gt;width(), videoImage-&gt;height()\}\};
skImage = SkImage::MakeFromNV12TexturesCopy(grContext,
                                            kRec601_SkYUVColorSpace,
                                            nv12TextureHandles,
                                            nv12Sizes,
                                            kTopLeft_GrSurfaceOrigin,
                                            nullptr);
</code></pre>

<p><img src="/images/20200307/nv12_ra.png" alt="图1" />
<img src="/images/20200307/nv12_rg.png" alt="图2" /></p>

<h1>查问题</h1>

<h4>1. 查视频的 YUV ColorSpace 是否和 SkImage 对应</h4>

<p>是一致的，但输出的图像还是有问题。</p>

<h3>2.试试把 VideoToolbox 的输出格式换成 RGBA</h3>

<p>配置 VideoToolbox 的 pixelFormat 为 <code>kCVPixelFormatType_32BGRA</code>，使用代码片段3把 pixelBuffer 转成 RGBA 纹理，然后使用代码片段4转成 SkImage，图像是正常的。
<code>objc
uint32_t pixelFormatType = kCVPixelFormatType_32BGRA;
</code>
<code>objc
// 代码片段3
CVOpenGLESTextureCacheCreateTextureFromImage(kCFAllocatorDefault,
                                             textCache,
                                             pixelBuffer,
                                             NULL,
                                             GL_TEXTURE_2D,
                                             GL_RGBA,
                                             width,
                                             height,
                                             GL_BGRA,
                                             GL_UNSIGNED_BYTE,
                                             0,
                                             &amp;outputTextureLuma);
</code>
<code>cpp
// 代码片段4
GrGLTextureInfo textureInfo = {videoImage-&gt;textureTarget(), videoImage-&gt;getTextureID(0)};
GrBackendTexture backendTexture(videoImage-&gt;width(), videoImage-&gt;height(), kRGBA_8888_GrPixelConfig,
                                textureInfo);
skImage =  SkImage::MakeFromTexture(grContext, backendTexture, kTopLeft_GrSurfaceOrigin,
                                    kPremul_SkAlphaType, nullptr);
</code></p>

<h3>3.查 Skia 源码</h3>

<pre><code class="cpp">// SkImage_Gpu.cpp
// SkImage::MakeFromNV12TexturesCopy -&gt; make_from_yuv_textures_copy
// GrYUVEffect.cpp
// GrYUVEffect::MakeYUVToRGB -&gt; YUVtoRGBEffect::Make -&gt; YUVtoRGBEffect() -&gt; onCreateGLSLInstance() -&gt; GLSLProcessor -&gt; shader '.rg'
</code></pre>

<p>从 Skia 的源码中一直跟下去，发现最后 shader 使用的是 <code>rg</code> 通道，而因为我们是用 <code>GL_LUMINANCE_ALPHA</code> 来获取 <code>UV</code> 数据，在 GLSL 中应该使用 <code>ra</code> 通道，所以出现了不一致。当使用<code>GL_RG</code>获取<code>UV</code>数据的时候（代码片段5），SkImage 输出的图片就正常了。
<code>objc
// 代码片段5
// UV 数据
CVOpenGLESTextureCacheCreateTextureFromImage(kCFAllocatorDefault,
                                             textCache,
                                             pixelBuffer,
                                             NULL,
                                             GL_TEXTURE_2D,
                                             GL_RG,
                                             width / 2,
                                             height / 2,
                                             GL_RG,
                                             GL_UNSIGNED_BYTE,
                                             1,
                                             &amp;outputTextureChroma);
</code></p>

<h1>Link</h1>

<p><a href="https://github.com/google/skia">skia</a><br/>
<a href="https://juejin.im/entry/5cbac68c6fb9a0688c039ebc">GL 移植到 Metal 的小细节</a></p>
]]></content>
  </entry>
  
</feed>
