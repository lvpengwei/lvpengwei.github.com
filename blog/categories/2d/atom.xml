<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2d | lvpengwei’s Blog]]></title>
  <link href="http://lvpengwei.github.io//blog/categories/2d/atom.xml" rel="self"/>
  <link href="http://lvpengwei.github.io//"/>
  <updated>2023-04-24T21:45:11+08:00</updated>
  <id>http://lvpengwei.github.io//</id>
  <author>
    <name><![CDATA[lvpengwei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PAG 去掉 Skia 后如何渲染 Path]]></title>
    <link href="http://lvpengwei.github.io//blog/2023/04/24/pag-qu-diao-skia-hou-ru-he-xuan-ran-path/"/>
    <updated>2023-04-24T21:37:16+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2023/04/24/pag-qu-diao-skia-hou-ru-he-xuan-ran-path</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>在 2D 绘图库中，path 绘制是很重要的一块。</p>

<h2>思路</h2>

<p>当我们要实现这一块的时候，优先想到的方案是封装一层接口，然后用平台侧的 API 去实现 path 的编辑和绘制，我们再提交到 OpenGL 去上屏。</p>

<p>但是经过调研发现，iOS 和 Mac 的 CGPath、web 的 Path2D 都没有实现类似 skia 的 <a href="https://api.skia.org/SkPathOps_8h.html#a3db3691847c3c9828e0c141e275b8ec2">path-ops</a>  功能；Android 因为背后就是 skia，所以它的 API 和 skia 基本保持一致；在 linux 平台，没有找到合适的 path 编辑库。</p>

<p>然后发现 skia 有一个 module 叫 <a href="https://skia.org/docs/user/modules/pathkit/">PathKit</a>，可以把 skia 的 Path 编辑部分编译成
wasm 提供给 web 使用，渲染时把 SkPath 转成 Path2D 或者直接调用 web-canvas 的 path 接口。因为之前看过 rlottie 使用 freetype 来渲染 path，所以如果 SkPath 能转成 FTOutline，那么全平台的 path 渲染都可以用 freetype 来实现。</p>

<p>调研之后得出结论是 OK 的。</p>

<p>因为 freetype 会增加包大小，而且在 iOS 和 web 平台，用 freetype 没法使用系统字体，所以我们决定 path 编辑部分都使用 SkPath，渲染部分 iOS 和 Mac 用 CoreGraphics，web 平台使用 canvas，其他平台因为文字解析需要使用 freetype，就统一用 freetype 来渲染 path。</p>

<table>
   <tr>
      <td>平台</td>
      <td>path 渲染</td>
   </tr>
    <tr>
      <td>iOS & Mac</td>
      <td>CoreGraphics</td>
   </tr>
   <tr>
      <td>Android</td>
      <td>freetype</td>
   </tr>
   <tr>
      <td>linux</td>
      <td>freetype</td>
   </tr>
   <tr>
      <td>windows</td>
      <td>freetype</td>
   </tr>
   <tr>
      <td>web</td>
      <td>canvas</td>
   </tr>
</table>


<p>在把 <code>SkPath</code> 转成 <code>FT_Outline</code> 时，要注意 <code>FT_Outline</code> 的 <code>n_contours</code> 和 <code>n_points</code> 是 <code>short</code> 类型，所以一个 <code>SkPath</code> 可能会转成多个 <code>FT_Outline</code>。</p>

<h2>pathkit</h2>

<p>提取出来的代码我们作为第三方库 <a href="https://github.com/libpag/pathkit">pathkit</a> 来引入。</p>

<h2>GPU 加速</h2>

<p>skia 的 path 绘制有一部分是使用 GPU 加速的，而我们实现的是 CPU 绘制再提交到 GPU。</p>

<p>我们去调研了一下，这么多年以来，path 的绘制都是依赖 CPU 去实现的，GPU 在发展的过程中并没有考虑这个问题。Khronos 有一个硬件加速矢量绘制的标准 API，叫 <a href="https://zh.wikipedia.org/wiki/OpenVG">OpenVG</a> ，但是没有普及起来。Nvidia 提供了 <a href="https://developer.nvidia.cn/gpu-accelerated-path-rendering">GPU Accelerated Path Rendering</a> ，也没有普及起来。而且不是所有的 path 都适合用 GPU 加速。</p>

<p>所以我们现阶段的方案是简单图形比如矩形、椭圆、圆等等，用 GPU 加速，复杂 path 比较少用，实现起来也比较麻烦，可以后续参考 skia 再支持 GPU 渲染。</p>

<h2>链接</h2>

<p><a href="https://github.com/google/skia">skia</a><br/>
<a href="https://api.skia.org/SkPathOps_8h.html#a3db3691847c3c9828e0c141e275b8ec2">path-ops</a><br/>
<a href="https://skia.org/docs/user/modules/pathkit/">PathKit</a><br/>
<a href="https://github.com/Samsung/rlottie">rlottie</a><br/>
<a href="https://developer.apple.com/documentation/coregraphics/cgpath">CoreGraphics-CGPath</a><br/>
<a href="https://developer.apple.com/documentation/coregraphics/cgcontext">CoreGraphics-CGContext</a><br/>
<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Path2D">web-Path2D</a><br/>
<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial">web-Canvas</a><br/>
<a href="https://on-demand.gputechconf.com/gtc/2012/presentations/S0024-GPU-Accelerated-Path-Rendering.pdf">GPU-Accelerated-Path-Rendering</a><br/>
<a href="https://news.ycombinator.com/item?id=9259910">GPU-accelerated Path Rendering (2012) [pdf]</a><br/>
<a href="https://softwareengineering.stackexchange.com/questions/191472/why-have-hardware-accelerated-vector-graphics-not-taken-off">why have hardware accelerated vector graphics not taken off</a></p>
]]></content>
  </entry>
  
</feed>
