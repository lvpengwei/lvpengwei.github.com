<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 纹理 | lvpengwei’s Blog]]></title>
  <link href="http://lvpengwei.github.io//blog/categories/wen-li/atom.xml" rel="self"/>
  <link href="http://lvpengwei.github.io//"/>
  <updated>2023-04-13T23:21:15+08:00</updated>
  <id>http://lvpengwei.github.io//</id>
  <author>
    <name><![CDATA[lvpengwei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[纹理边缘抗锯齿 CoverageAA]]></title>
    <link href="http://lvpengwei.github.io//blog/2021/12/11/wen-li-bian-yuan-kang-ju-chi-coverage-aa/"/>
    <updated>2021-12-11T12:30:34+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2021/12/11/wen-li-bian-yuan-kang-ju-chi-coverage-aa</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>用 OpenGL 旋转图片的时候，图片边缘会出现锯齿。</p>

<p>图 1 是没有做抗锯齿的时候，可以明显看到边缘的锯齿。</p>

<div align=center>
<img src="https://s2.loli.net/2021/12/11/QsFLYTfqxGlEWBv.png" width="500"/>
<br/>
图 1
</div>


<h2>思路</h2>

<p>首先想到的是 OpenGL 提供的 MSAA，但是 MSAA 占用内存比较多。然后去查了下 skia 的抗锯齿是如何实现的，发现它只是对图片边缘的 1px 做一个 alpha 从 1->0 渐变的遮罩。</p>

<p>如图 2 所示，矩形 abcd 是我们要绘制的区域，根据矩形的坐标向内缩 0.5px 得到矩形 P0_P1_P3_P2，向外扩 0.5px 得到矩形 P4_P5_P7_P6。内矩形里面 alpha 都是 1，外矩形边缘 alpha 都是 0，内矩形和外矩形之间 alpha 从 1->0 渐变。这样我们就对边缘做了一个逐渐消失的效果，从视觉上看，边缘的锯齿就没那么明显了。</p>

<div align=center>
<img src="https://s2.loli.net/2021/12/05/KtvNZQPdw8SLHTq.png" width="500"/>
<br/>
图 2
</div>


<h2>解决</h2>

<h3>没有抗锯齿</h3>

<p>在没有使用抗锯齿时，我们绘制一个矩形，提交的是 cdba 4 个顶点，2 个三角形。
<code>cpp
auto bounds = args.rectToDraw;  
auto normalBounds = Rect::MakeLTRB(0, 0, 1, 1);
return {  
  bounds.right, bounds.bottom, normalBounds.right, normalBounds.bottom,  
  bounds.right, bounds.top, normalBounds.right, normalBounds.top,  
  bounds.left, bounds.bottom, normalBounds.left, normalBounds.bottom,  
  bounds.left, bounds.top, normalBounds.left, normalBounds.top,  
};
</code>
对应的绘制命令是
<code>cpp
gl-&gt;drawArrays(GL_TRIANGLE_STRIP, 0, 4);
</code></p>

<h3>抗锯齿 CoverageAA</h3>

<p>在使用 CoverageAA 抗锯齿时，我们绘制一个矩形，提交的是内矩形 P0P1P2P3 和外矩形 P4P5P6P7 的 8 个顶点：
```cpp
auto bounds = args.rectToDraw;
auto normalBounds = Rect::MakeLTRB(0, 0, 1, 1);</p>

<p>auto padding = 0.5f;<br/>
auto insetBounds = bounds.makeInset(padding, padding);<br/>
auto outsetBounds = bounds.makeOutset(padding, padding);</p>

<p>auto normalPadding = Point::Make(padding / bounds.width(), padding / bounds.height());<br/>
auto normalInset = normalBounds.makeInset(normalPadding.x, normalPadding.y);<br/>
auto normalOutset = normalBounds.makeOutset(normalPadding.x, normalPadding.y);
return {<br/>
  insetBounds.left, insetBounds.top, 1.0f, normalInset.left, normalInset.top,<br/>
  insetBounds.left, insetBounds.bottom, 1.0f, normalInset.left, normalInset.bottom,<br/>
  insetBounds.right, insetBounds.top, 1.0f, normalInset.right, normalInset.top,<br/>
  insetBounds.right, insetBounds.bottom, 1.0f, normalInset.right, normalInset.bottom,<br/>
  outsetBounds.left, outsetBounds.top, 0.0f, normalOutset.left, normalOutset.top,<br/>
  outsetBounds.left, outsetBounds.bottom, 0.0f, normalOutset.left, normalOutset.bottom,<br/>
  outsetBounds.right, outsetBounds.top, 0.0f, normalOutset.right, normalOutset.top,<br/>
  outsetBounds.right, outsetBounds.bottom, 0.0f, normalOutset.right, normalOutset.bottom,<br/>
};
<code>
转换成三角形是 30 个顶点，下面是三角形的 index 数据
</code>cpp
static constexpr int kIndicesPerAAFillRect = 30;
static constexpr uint16_t gFillAARectIdx[] = {<br/>
  0, 1, 2, 1, 3, 2,<br/>
  0, 4, 1, 4, 5, 1,<br/>
  0, 6, 4, 0, 2, 6,<br/>
  2, 3, 6, 3, 7, 6,<br/>
  1, 5, 3, 3, 5, 7,<br/>
};
<code>
绘制命令是
</code>cpp
glDrawElements(GL_TRIANGLES, kIndicesPerAAFillRect, GL_UNSIGNED_SHORT, 0);
```</p>

<h2>结果</h2>

<p>图 3 是做完抗锯齿的效果，可以看到边缘的锯齿已经没有了。</p>

<div align=center>
<img src="https://s2.loli.net/2021/12/11/gquEYZ2hc1JM57H.png" width="500"/>
<br/>
图 3
</div>


<p>图 4 是图 1 和 图 3 边缘对比的细节，可以看到边缘像素的过渡圆滑了很多。</p>

<div align=center>
<img src="https://s2.loli.net/2021/12/11/hHuSMsJ8zZbvrVo.png" width="500"/>
<br/>
图 4
</div>


<h2>链接</h2>

<p><a href="https://github.com/google/skia">skia</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[纹理局部采样]]></title>
    <link href="http://lvpengwei.github.io//blog/2021/08/05/wen-li-ju-bu-cai-yang/"/>
    <updated>2021-08-05T17:21:42+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2021/08/05/wen-li-ju-bu-cai-yang</id>
    <content type="html"><![CDATA[<h2>现象</h2>

<p>在使用 MediaCodec 解码视频获取到纹理时，它会给出一个 cropRect 来裁剪多余的绿色像素。当拿着这个纹理和对应的 cropRect 去上屏的时候，发现在边缘的地方有一像素绿边。</p>

<p>如图所示，解码出的纹理大小是 <code>1920*1088</code>，有 8 像素的绿边；裁剪后大小是 <code>1920*1080</code>，有 1 像素绿边。</p>

<h4>解码图片</h4>

<p><img src="/images/20210805/decoded_image.png" width="480" alt="" /></p>

<h4>裁剪后</h4>

<p><img src="/images/20210805/crop_image.png" width="480" alt="" /></p>

<h2>纹素和像素的映射关系</h2>

<p>一开始怀疑是纹素和像素的坐标系不一致的问题，对纹理坐标减了 0.5，发现还是有绿边。然后还找到坐标系不一致的问题只存在于 D3D9，后续的 D3D10 修改了坐标系的对应关系，而且 OpenGL 的坐标系一直没这个问题。</p>

<h2>收缩 0.5 纹素</h2>

<p>在<a href="https://stackoverflow.com/questions/6023400/opengl-es-texture-coordinates-slightly-off">OpenGL ES Texture Coordinates Slightly Off</a>上看到说只有当采样的点在纹素中心，才返回准确的颜色，否则就是插值出来的。也就是当采样的点在纹素中心和边界之间时，可能就会采到超出边界的颜色。</p>

<h2>查 Android 源码</h2>

<p>同时也发现使用<code>SurfaceTexture.getTransformMatrix</code>得到的 matrix 时，画面是正常的，所以去查看了 Android 的源码，想知道这个 matrix 是怎么生成的。</p>

<p>生成的逻辑就是下面这段代码，可以看到注释说为了防止双线性采样超过裁剪边缘，普通纹理需要收缩 0.5 纹素，YUV420的要收缩 1.0 纹素。</p>

<pre><code class="cpp">......
......
void SurfaceTexture::computeTransformMatrix(float outTransform[16], const sp&lt;GraphicBuffer&gt;&amp; buf,
                                            const Rect&amp; cropRect, uint32_t transform,
                                            bool filtering) {
    ......
    if (!cropRect.isEmpty() &amp;&amp; buf.get()) {
        float tx = 0.0f, ty = 0.0f, sx = 1.0f, sy = 1.0f;
        float bufferWidth = buf-&gt;getWidth();
        float bufferHeight = buf-&gt;getHeight();
        float shrinkAmount = 0.0f;
        if (filtering) {
            // In order to prevent bilinear sampling beyond the edge of the
            // crop rectangle we may need to shrink it by 2 texels in each
            // dimension.  Normally this would just need to take 1/2 a texel
            // off each end, but because the chroma channels of YUV420 images
            // are subsampled we may need to shrink the crop region by a whole
            // texel on each side.
            switch (buf-&gt;getPixelFormat()) {
                case PIXEL_FORMAT_RGBA_8888:
                case PIXEL_FORMAT_RGBX_8888:
                case PIXEL_FORMAT_RGBA_FP16:
                case PIXEL_FORMAT_RGBA_1010102:
                case PIXEL_FORMAT_RGB_888:
                case PIXEL_FORMAT_RGB_565:
                case PIXEL_FORMAT_BGRA_8888:
                    // We know there's no subsampling of any channels, so we
                    // only need to shrink by a half a pixel.
                    shrinkAmount = 0.5;
                    break;

                default:
                    // If we don't recognize the format, we must assume the
                    // worst case (that we care about), which is YUV420.
                    shrinkAmount = 1.0;
                    break;
            }
        }

        // Only shrink the dimensions that are not the size of the buffer.
        if (cropRect.width() &lt; bufferWidth) {
            tx = (float(cropRect.left) + shrinkAmount) / bufferWidth;
            sx = (float(cropRect.width()) - (2.0f * shrinkAmount)) / bufferWidth;
        }
        if (cropRect.height() &lt; bufferHeight) {
            ty = (float(bufferHeight - cropRect.bottom) + shrinkAmount) / bufferHeight;
            sy = (float(cropRect.height()) - (2.0f * shrinkAmount)) / bufferHeight;
        }

        mat4 crop(sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1);
        xform = crop * xform;
    }
    ......
}
......
......
</code></pre>

<p>再看一遍<a href="https://developer.android.com/reference/android/graphics/SurfaceTexture#getTransformMatrix(float[]">SurfaceTexture.getTransformMatrix</a>)发现也有说明。</p>

<p><img src="/images/20210805/getTransformMatrix.png" width="600" alt="" /></p>

<h2>双线性插值（Bilinear Filtering）</h2>

<p> 双线性插值会取临近 4 个像素的加权平均值。</p>

<p><img src="https://s2.loli.net/2021/12/11/hgFatmDMCX15T6d.jpg" width="500" alt="bilinear_filtering.jpg" /></p>

<p>上面的情况我们在传递的是图片边缘的 UV 坐标，那么由于双线性采样，它就会采到下面绿色的像素；如果我们传递的 UV 坐标收缩 0.5px，那么边缘外面的像素权重会是 0，就采不到绿色。</p>

<h2>链接</h2>

<p><a href="https://stackoverflow.com/questions/6023400/opengl-es-texture-coordinates-slightly-off">OpenGL ES Texture Coordinates Slightly Off</a><br/>
<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/native/libs/nativedisplay/surfacetexture/SurfaceTexture.cpp;l=275;drc=master;bpv=0;bpt=1">SurfaceTexture::computeTransformMatrix</a><br/>
<a href="https://developer.android.com/reference/android/graphics/SurfaceTexture#getTransformMatrix(float[]">SurfaceTexture.getTransformMatrix</a>)<br/>
<a href="https://zhuanlan.zhihu.com/p/143377682">图形学底层探秘 - 纹理采样、环绕、过滤与Mipmap的那些事</a><br/>
<a href="https://docs.microsoft.com/en-us/windows/win32/direct3d9/directly-mapping-texels-to-pixels">Directly Mapping Texels to Pixels (Direct3D 9)</a></p>
]]></content>
  </entry>
  
</feed>
