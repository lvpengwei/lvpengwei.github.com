<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lvpengwei’s Blog]]></title>
  <link href="http://lvpengwei.github.io//atom.xml" rel="self"/>
  <link href="http://lvpengwei.github.io//"/>
  <updated>2021-12-11T14:06:16+08:00</updated>
  <id>http://lvpengwei.github.io//</id>
  <author>
    <name><![CDATA[lvpengwei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[纹理边缘抗锯齿 CoverageAA]]></title>
    <link href="http://lvpengwei.github.io//blog/2021/12/11/wen-li-bian-yuan-kang-ju-chi-coverage-aa/"/>
    <updated>2021-12-11T12:30:34+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2021/12/11/wen-li-bian-yuan-kang-ju-chi-coverage-aa</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>用 OpenGL 旋转图片的时候，图片边缘会出现锯齿。</p>

<p>图 1 是没有做抗锯齿的时候，可以明显看到边缘的锯齿。</p>

<div align=center>
<img src="https://s2.loli.net/2021/12/11/QsFLYTfqxGlEWBv.png" width="500"/>
<br/>
图 1
</div>


<h2>思路</h2>

<p>首先想到的是 OpenGL 提供的 MSAA，但是 MSAA 占用内存比较多。然后去查了下 skia 的抗锯齿是如何实现的，发现它只是对图片边缘的 1px 做一个 alpha 从 1->0 渐变的遮罩。</p>

<p>如图 2 所示，矩形 abcd 是我们要绘制的区域，根据矩形的坐标向内缩 0.5px 得到矩形 P0_P1_P3_P2，向外扩 0.5px 得到矩形 P4_P5_P7_P6。内矩形里面 alpha 都是 1，外矩形边缘 alpha 都是 0，内矩形和外矩形之间 alpha 从 1->0 渐变。这样我们就对边缘做了一个逐渐消失的效果，从视觉上看，边缘的锯齿就没那么明显了。</p>

<div align=center>
<img src="https://s2.loli.net/2021/12/05/KtvNZQPdw8SLHTq.png" width="500"/>
<br/>
图 2
</div>


<h2>解决</h2>

<h3>没有抗锯齿</h3>

<p>在没有使用抗锯齿时，我们绘制一个矩形，提交的是 cdba 4 个顶点，2 个三角形。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">auto</span> <span class="n">bounds</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">rectToDraw</span><span class="p">;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">normalBounds</span> <span class="o">=</span> <span class="n">Rect</span><span class="o">::</span><span class="n">MakeLTRB</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">bounds</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">bounds</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span> <span class="n">normalBounds</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">normalBounds</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span>
</span><span class='line'>  <span class="n">bounds</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">bounds</span><span class="p">.</span><span class="n">top</span><span class="p">,</span> <span class="n">normalBounds</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">normalBounds</span><span class="p">.</span><span class="n">top</span><span class="p">,</span>
</span><span class='line'>  <span class="n">bounds</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">bounds</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span> <span class="n">normalBounds</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">normalBounds</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span>
</span><span class='line'>  <span class="n">bounds</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">bounds</span><span class="p">.</span><span class="n">top</span><span class="p">,</span> <span class="n">normalBounds</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">normalBounds</span><span class="p">.</span><span class="n">top</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应的绘制命令是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">gl</span><span class="o">-&gt;</span><span class="n">drawArrays</span><span class="p">(</span><span class="n">GL_TRIANGLE_STRIP</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>抗锯齿 CoverageAA</h3>

<p>在使用 CoverageAA 抗锯齿时，我们绘制一个矩形，提交的是内矩形 P0P1P2P3 和外矩形 P4P5P6P7 的 8 个顶点：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">auto</span> <span class="n">bounds</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">rectToDraw</span><span class="p">;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">normalBounds</span> <span class="o">=</span> <span class="n">Rect</span><span class="o">::</span><span class="n">MakeLTRB</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">auto</span> <span class="n">padding</span> <span class="o">=</span> <span class="mf">0.5f</span><span class="p">;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">insetBounds</span> <span class="o">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">makeInset</span><span class="p">(</span><span class="n">padding</span><span class="p">,</span> <span class="n">padding</span><span class="p">);</span>
</span><span class='line'><span class="k">auto</span> <span class="n">outsetBounds</span> <span class="o">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">makeOutset</span><span class="p">(</span><span class="n">padding</span><span class="p">,</span> <span class="n">padding</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">auto</span> <span class="n">normalPadding</span> <span class="o">=</span> <span class="n">Point</span><span class="o">::</span><span class="n">Make</span><span class="p">(</span><span class="n">padding</span> <span class="o">/</span> <span class="n">bounds</span><span class="p">.</span><span class="n">width</span><span class="p">(),</span> <span class="n">padding</span> <span class="o">/</span> <span class="n">bounds</span><span class="p">.</span><span class="n">height</span><span class="p">());</span>
</span><span class='line'><span class="k">auto</span> <span class="n">normalInset</span> <span class="o">=</span> <span class="n">normalBounds</span><span class="p">.</span><span class="n">makeInset</span><span class="p">(</span><span class="n">normalPadding</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">normalPadding</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="k">auto</span> <span class="n">normalOutset</span> <span class="o">=</span> <span class="n">normalBounds</span><span class="p">.</span><span class="n">makeOutset</span><span class="p">(</span><span class="n">normalPadding</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">normalPadding</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">insetBounds</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">insetBounds</span><span class="p">.</span><span class="n">top</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">,</span> <span class="n">normalInset</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">normalInset</span><span class="p">.</span><span class="n">top</span><span class="p">,</span>
</span><span class='line'>  <span class="n">insetBounds</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">insetBounds</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">,</span> <span class="n">normalInset</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">normalInset</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span>
</span><span class='line'>  <span class="n">insetBounds</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">insetBounds</span><span class="p">.</span><span class="n">top</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">,</span> <span class="n">normalInset</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">normalInset</span><span class="p">.</span><span class="n">top</span><span class="p">,</span>
</span><span class='line'>  <span class="n">insetBounds</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">insetBounds</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">,</span> <span class="n">normalInset</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">normalInset</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span>
</span><span class='line'>  <span class="n">outsetBounds</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">outsetBounds</span><span class="p">.</span><span class="n">top</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="n">normalOutset</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">normalOutset</span><span class="p">.</span><span class="n">top</span><span class="p">,</span>
</span><span class='line'>  <span class="n">outsetBounds</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">outsetBounds</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="n">normalOutset</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">normalOutset</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span>
</span><span class='line'>  <span class="n">outsetBounds</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">outsetBounds</span><span class="p">.</span><span class="n">top</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="n">normalOutset</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">normalOutset</span><span class="p">.</span><span class="n">top</span><span class="p">,</span>
</span><span class='line'>  <span class="n">outsetBounds</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">outsetBounds</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="n">normalOutset</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">normalOutset</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>转换成三角形是 30 个顶点，下面是三角形的 index 数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">static</span> <span class="k">constexpr</span> <span class="kt">int</span> <span class="n">kIndicesPerAAFillRect</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">constexpr</span> <span class="kt">uint16_t</span> <span class="n">gFillAARectIdx</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>绘制命令是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">glDrawElements</span><span class="p">(</span><span class="n">GL_TRIANGLES</span><span class="p">,</span> <span class="n">kIndicesPerAAFillRect</span><span class="p">,</span> <span class="n">GL_UNSIGNED_SHORT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>结果</h2>

<p>图 3 是做完抗锯齿的效果，可以看到边缘的锯齿已经没有了。</p>

<div align=center>
<img src="https://s2.loli.net/2021/12/11/gquEYZ2hc1JM57H.png" width="500"/>
<br/>
图 3
</div>


<p>图 4 是图 1 和 图 3 边缘对比的细节，可以看到边缘像素的过渡圆滑了很多。</p>

<div align=center>
<img src="https://s2.loli.net/2021/12/11/hHuSMsJ8zZbvrVo.png" width="500"/>
<br/>
图 4
</div>


<h2>链接</h2>

<p><a href="https://github.com/google/skia">skia</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[纹理局部采样]]></title>
    <link href="http://lvpengwei.github.io//blog/2021/08/05/wen-li-ju-bu-cai-yang/"/>
    <updated>2021-08-05T17:21:42+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2021/08/05/wen-li-ju-bu-cai-yang</id>
    <content type="html"><![CDATA[<h2>现象</h2>

<p>在使用 MediaCodec 解码视频获取到纹理时，它会给出一个 cropRect 来裁剪多余的绿色像素。当拿着这个纹理和对应的 cropRect 去上屏的时候，发现在边缘的地方有一像素绿边。</p>

<p>如图所示，解码出的纹理大小是 <code>1920*1088</code>，有 8 像素的绿边；裁剪后大小是 <code>1920*1080</code>，有 1 像素绿边。</p>

<h4>解码图片</h4>

<p><img src="http://lvpengwei.github.io//images/20210805/decoded_image.png" width="480" alt="" /></p>

<h4>裁剪后</h4>

<p><img src="http://lvpengwei.github.io//images/20210805/crop_image.png" width="480" alt="" /></p>

<h2>纹素和像素的映射关系</h2>

<p>一开始怀疑是纹素和像素的坐标系不一致的问题，对纹理坐标减了 0.5，发现还是有绿边。然后还找到坐标系不一致的问题只存在于 D3D9，后续的 D3D10 修改了坐标系的对应关系，而且 OpenGL 的坐标系一直没这个问题。</p>

<h2>收缩 0.5 纹素</h2>

<p>在<a href="https://stackoverflow.com/questions/6023400/opengl-es-texture-coordinates-slightly-off">OpenGL ES Texture Coordinates Slightly Off</a>上看到说只有当采样的点在纹素中心，才返回准确的颜色，否则就是插值出来的。也就是当采样的点在纹素中心和边界之间时，可能就会采到超出边界的颜色。</p>

<h2>查 Android 源码</h2>

<p>同时也发现使用<code>SurfaceTexture.getTransformMatrix</code>得到的 matrix 时，画面是正常的，所以去查看了 Android 的源码，想知道这个 matrix 是怎么生成的。</p>

<p>生成的逻辑就是下面这段代码，可以看到注释说为了防止双线性采样超过裁剪边缘，普通纹理需要收缩 0.5 纹素，YUV420的要收缩 1.0 纹素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="p">......</span>
</span><span class='line'><span class="p">......</span>
</span><span class='line'><span class="kt">void</span> <span class="n">SurfaceTexture</span><span class="o">::</span><span class="n">computeTransformMatrix</span><span class="p">(</span><span class="kt">float</span> <span class="n">outTransform</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="k">const</span> <span class="n">sp</span><span class="o">&lt;</span><span class="n">GraphicBuffer</span><span class="o">&gt;&amp;</span> <span class="n">buf</span><span class="p">,</span>
</span><span class='line'>                                            <span class="k">const</span> <span class="n">Rect</span><span class="o">&amp;</span> <span class="n">cropRect</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">transform</span><span class="p">,</span>
</span><span class='line'>                                            <span class="kt">bool</span> <span class="n">filtering</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">......</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">cropRect</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">buf</span><span class="p">.</span><span class="n">get</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">tx</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="n">ty</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="n">sx</span> <span class="o">=</span> <span class="mf">1.0f</span><span class="p">,</span> <span class="n">sy</span> <span class="o">=</span> <span class="mf">1.0f</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">bufferWidth</span> <span class="o">=</span> <span class="n">buf</span><span class="o">-&gt;</span><span class="n">getWidth</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">bufferHeight</span> <span class="o">=</span> <span class="n">buf</span><span class="o">-&gt;</span><span class="n">getHeight</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">shrinkAmount</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">filtering</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// In order to prevent bilinear sampling beyond the edge of the</span>
</span><span class='line'>            <span class="c1">// crop rectangle we may need to shrink it by 2 texels in each</span>
</span><span class='line'>            <span class="c1">// dimension.  Normally this would just need to take 1/2 a texel</span>
</span><span class='line'>            <span class="c1">// off each end, but because the chroma channels of YUV420 images</span>
</span><span class='line'>            <span class="c1">// are subsampled we may need to shrink the crop region by a whole</span>
</span><span class='line'>            <span class="c1">// texel on each side.</span>
</span><span class='line'>            <span class="k">switch</span> <span class="p">(</span><span class="n">buf</span><span class="o">-&gt;</span><span class="n">getPixelFormat</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">PIXEL_FORMAT_RGBA_8888</span><span class="p">:</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">PIXEL_FORMAT_RGBX_8888</span><span class="p">:</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">PIXEL_FORMAT_RGBA_FP16</span><span class="p">:</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">PIXEL_FORMAT_RGBA_1010102</span><span class="p">:</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">PIXEL_FORMAT_RGB_888</span><span class="p">:</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">PIXEL_FORMAT_RGB_565</span><span class="p">:</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">PIXEL_FORMAT_BGRA_8888</span><span class="p">:</span>
</span><span class='line'>                    <span class="c1">// We know there&#39;s no subsampling of any channels, so we</span>
</span><span class='line'>                    <span class="c1">// only need to shrink by a half a pixel.</span>
</span><span class='line'>                    <span class="n">shrinkAmount</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                    <span class="c1">// If we don&#39;t recognize the format, we must assume the</span>
</span><span class='line'>                    <span class="c1">// worst case (that we care about), which is YUV420.</span>
</span><span class='line'>                    <span class="n">shrinkAmount</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Only shrink the dimensions that are not the size of the buffer.</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">cropRect</span><span class="p">.</span><span class="n">width</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">bufferWidth</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">tx</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">(</span><span class="n">cropRect</span><span class="p">.</span><span class="n">left</span><span class="p">)</span> <span class="o">+</span> <span class="n">shrinkAmount</span><span class="p">)</span> <span class="o">/</span> <span class="n">bufferWidth</span><span class="p">;</span>
</span><span class='line'>            <span class="n">sx</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">(</span><span class="n">cropRect</span><span class="p">.</span><span class="n">width</span><span class="p">())</span> <span class="o">-</span> <span class="p">(</span><span class="mf">2.0f</span> <span class="o">*</span> <span class="n">shrinkAmount</span><span class="p">))</span> <span class="o">/</span> <span class="n">bufferWidth</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">cropRect</span><span class="p">.</span><span class="n">height</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">bufferHeight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">ty</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">(</span><span class="n">bufferHeight</span> <span class="o">-</span> <span class="n">cropRect</span><span class="p">.</span><span class="n">bottom</span><span class="p">)</span> <span class="o">+</span> <span class="n">shrinkAmount</span><span class="p">)</span> <span class="o">/</span> <span class="n">bufferHeight</span><span class="p">;</span>
</span><span class='line'>            <span class="n">sy</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">(</span><span class="n">cropRect</span><span class="p">.</span><span class="n">height</span><span class="p">())</span> <span class="o">-</span> <span class="p">(</span><span class="mf">2.0f</span> <span class="o">*</span> <span class="n">shrinkAmount</span><span class="p">))</span> <span class="o">/</span> <span class="n">bufferHeight</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mat4</span> <span class="n">crop</span><span class="p">(</span><span class="n">sx</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sy</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tx</span><span class="p">,</span> <span class="n">ty</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">xform</span> <span class="o">=</span> <span class="n">crop</span> <span class="o">*</span> <span class="n">xform</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">......</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">......</span>
</span><span class='line'><span class="p">......</span>
</span></code></pre></td></tr></table></div></figure>


<p>再看一遍<a href="https://developer.android.com/reference/android/graphics/SurfaceTexture#getTransformMatrix(float[]">SurfaceTexture.getTransformMatrix</a>)发现也有说明。</p>

<p><img src="http://lvpengwei.github.io//images/20210805/getTransformMatrix.png" width="600" alt="" /></p>

<h2>双线性插值（Bilinear Filtering）</h2>

<p> 双线性插值会取临近 4 个像素的加权平均值。</p>

<p><img src="https://s2.loli.net/2021/12/11/hgFatmDMCX15T6d.jpg" width="500" alt="bilinear_filtering.jpg" /></p>

<p>上面的情况我们在传递的是图片边缘的 UV 坐标，那么由于双线性采样，它就会采到下面绿色的像素；如果我们传递的 UV 坐标收缩 0.5px，那么边缘外面的像素权重会是 0，就采不到绿色。</p>

<h2>链接</h2>

<p><a href="https://stackoverflow.com/questions/6023400/opengl-es-texture-coordinates-slightly-off">OpenGL ES Texture Coordinates Slightly Off</a><br/>
<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/native/libs/nativedisplay/surfacetexture/SurfaceTexture.cpp;l=275;drc=master;bpv=0;bpt=1">SurfaceTexture::computeTransformMatrix</a><br/>
<a href="https://developer.android.com/reference/android/graphics/SurfaceTexture#getTransformMatrix(float[]">SurfaceTexture.getTransformMatrix</a>)<br/>
<a href="https://zhuanlan.zhihu.com/p/143377682">图形学底层探秘 - 纹理采样、环绕、过滤与Mipmap的那些事</a><br/>
<a href="https://docs.microsoft.com/en-us/windows/win32/direct3d9/directly-mapping-texels-to-pixels">Directly Mapping Texels to Pixels (Direct3D 9)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mp3精准seek与比特池技术]]></title>
    <link href="http://lvpengwei.github.io//blog/2020/04/11/mp3jing-zhun-seekyu-bi-te-chi-ji-zhu/"/>
    <updated>2020-04-11T16:00:20+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2020/04/11/mp3jing-zhun-seekyu-bi-te-chi-ji-zhu</id>
    <content type="html"><![CDATA[<blockquote><p>ffmpeg 的 seek flag AVSEEK_FLAG_ANY 并不精准。</p></blockquote>

<h3>起因</h3>

<p>最近在做音频剪辑的功能，有下面的场景</p>

<p>一段音频，一个时间区间将它分成三段，前段和后段速度保持不变，中间一段变速2倍。</p>

<p>实现上，我分成了三个不同的 segment 来处理，segment.start 不等于 0 的，会执行一下 seek，使用的是 ffmpeg 的 <code>AVSEEK_FLAG_ANY | AVSEEK_FLAG_BACKWARD</code>，来精准 seek，完成之后发现段与段交接的地方声音并不连贯。</p>

<h4>裁剪 frame</h4>

<p>我已经做了一个处理，在段结尾的时候，裁掉多余的bytes，在段开始的时候也裁掉，保证段与段之间解码后的数据连续。但是声音还是不连续。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SampleData</span><span class="o">&gt;</span> <span class="n">AudioSegmentReader</span><span class="o">::</span><span class="n">copyNextSample</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">currentLength</span> <span class="o">&gt;=</span> <span class="n">endLength</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">data</span> <span class="o">=</span> <span class="n">copyNextSampleInternal</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">data</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// 裁掉结尾多余的 bytes</span>
</span><span class='line'>    <span class="n">data</span><span class="o">-&gt;</span><span class="n">length</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">length</span><span class="p">,</span> <span class="n">endLength</span> <span class="o">-</span>   <span class="n">currentLength</span><span class="p">);</span>
</span><span class='line'>    <span class="n">currentLength</span> <span class="o">+=</span> <span class="n">data</span><span class="o">-&gt;</span><span class="n">length</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 解码出的数据判断是否需要裁掉开头的 bytes</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">decoder</span><span class="o">-&gt;</span><span class="n">onRenderFrame</span><span class="p">();</span>
</span><span class='line'><span class="k">auto</span> <span class="n">time</span> <span class="o">=</span> <span class="n">decoder</span><span class="o">-&gt;</span><span class="n">currentPresentationTime</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">time</span> <span class="o">&amp;&amp;</span> <span class="n">time</span> <span class="o">&lt;</span> <span class="n">startTime</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">delta</span> <span class="o">=</span> <span class="n">startLength</span> <span class="o">-</span> <span class="n">SampleTimeToLength</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">outputSetting</span><span class="p">.</span><span class="n">get</span><span class="p">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">delta</span> <span class="o">&lt;</span> <span class="n">data</span><span class="o">-&gt;</span><span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">data</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">+=</span> <span class="n">delta</span><span class="p">;</span>
</span><span class='line'>        <span class="n">data</span><span class="o">-&gt;</span><span class="n">length</span> <span class="o">-=</span> <span class="n">delta</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">data</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span><span class='line'>        <span class="n">data</span><span class="o">-&gt;</span><span class="n">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>排查 packet 和 frame</h4>

<p>打印了一下段与段连接地方的 packet 的 packetData 和 frameData，发现 packetData 正常，seek 之后的 frameData 中前面大部分是 0，和上一段结尾解出的 frameData 不一样。记得音频帧可以独立解码，不需要参考前面的帧数据，那问题出现在哪里？</p>

<blockquote><p>一个测试：解封装连续，解码之前 flush 一下 decoder，会发现 frameData 基本都是有问题的。</p></blockquote>

<h4>了解 mp3 帧头格式</h4>

<p>很多规则，但是没卵用。</p>

<h4>比特池技术</h4>

<p>最后去查 mp3 的解码过程实现，发现 mp3 使用了比特池技术，当前帧的主数据可能放在上一帧。。。。也就是要实现精准 seek，得往前多 seek 几帧，然后把前面的 frame 丢掉。
试了一下，结果如预期。</p>

<h3>参考</h3>

<p><a href="https://blog.csdn.net/jgdu1981/article/details/6757498">mp3比特池技术</a><br/>
<a href="http://journal2.cqupt.edu.cn/jcuptnse/html/2013/1673-825X-25-4-494.html">功耗高集成度MP3解码器IP核设计</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何获取VideoToolbox的reorder Size]]></title>
    <link href="http://lvpengwei.github.io//blog/2020/03/07/ru-he-huo-qu-videotoolboxde-reorder-size/"/>
    <updated>2020-03-07T11:17:28+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2020/03/07/ru-he-huo-qu-videotoolboxde-reorder-size</id>
    <content type="html"><![CDATA[<h1>Decoder 的区别</h1>

<p>FFmpeg 和 MediaCodec 解码的时候，送数据的顺序是 dts，出数据的顺序是 pts，而 VideoToolbox 是送一个出一个，没有按照 pts 来出数据，需要我们自己排序。</p>

<p>去网上查资料的时候，发现有很多不同的方式</p>

<ol>
<li>sps.max_num_ref_frames</li>
<li>sps.vui.max_num_reorder_frames</li>
<li>通过 sps.level 计算</li>
<li>直接设置为4</li>
</ol>


<p>通过测试几个文件的 sps 发现 <code>max_num_ref_frames</code> 不是很准</p>

<ol>
<li><code>max_num_ref_frames=0; max_num_reorder_frames=2</code></li>
<li><code>max_num_ref_frames=9; max_num_reorder_frames=2</code></li>
</ol>


<h1>sps.max_num_ref_frames</h1>

<p>取 <code>max_num_ref_frames</code> 的有两个播放器，ijkplayer 和 ThumbPlayer</p>

<h2>ijkplayer</h2>

<p>ijkplayer 的逻辑是先取 <code>sps.max_num_ref_frames</code>，然后再取最小值2，最大值5。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">fmt_desc</span><span class="o">-&gt;</span><span class="n">max_ref_frames</span> <span class="o">=</span> <span class="n">FFMAX</span><span class="p">(</span><span class="n">fmt_desc</span><span class="o">-&gt;</span><span class="n">max_ref_frames</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">fmt_desc</span><span class="o">-&gt;</span><span class="n">max_ref_frames</span> <span class="o">=</span> <span class="n">FFMIN</span><span class="p">(</span><span class="n">fmt_desc</span><span class="o">-&gt;</span><span class="n">max_ref_frames</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>主要代码在下面两个文件。<br/>
<a href="https://github.com/bilibili/ijkplayer/blob/master/ios/IJKMediaPlayer/IJKMediaPlayer/ijkmedia/ijkplayer/ios/pipeline/IJKVideoToolBoxAsync.m#L1136">IJKVideoToolBoxAsync.m</a><br/>
<a href="https://github.com/bilibili/ijkplayer/blob/cced91e3ae3730f5c63f3605b00d25eafcf5b97b/ios/IJKMediaPlayer/IJKMediaPlayer/ijkmedia/ijkplayer/ios/pipeline/h264_sps_parser.h#L267">h264_sps_parser.h</a></p>

<h2>ThumbPlayer</h2>

<p>ThumbPlayer 的逻辑是取 <code>sps.max_num_ref_frames</code>，如果没有设置为  10。</p>

<h1>sps.vui.max_num_reorder_frames</h1>

<p>取 <code>max_num_reorder_frames</code> 的有三个</p>

<ol>
<li><a href="https://cs.chromium.org/">Chrome</a></li>
<li><a href="https://github.com/videolan/vlc">vlc</a></li>
<li><a href="https://cs.android.com/android/platform/superproject/+/master:external/v4l2_codec2/vda/h264_decoder.cc;l=1042?q=max_num_reorder_frames&amp;ss=android%2Fplatform%2Fsuperproject">MediaCodec</a></li>
</ol>


<h2>Chrome</h2>

<p>Chrome 的主要代码如下，代码文件在<a href="https://cs.chromium.org/chromium/src/media/gpu/mac/vt_video_decode_accelerator_mac.cc?dr=CSs&amp;q=vt_video_decode_accelerator_mac&amp;g=0&amp;l=262">vt_video_decode_accelerator_mac.cc</a> 。</p>

<ol>
<li>先判断 <code>pocType</code>，为 2 直接返回不需要排序</li>
<li>再判断是否有 <code>vuiParameters</code>，取 <code>max_num_reorder_frames</code></li>
<li>然后是特定的 profile，不需要排序</li>
<li>最后返回 <code>max_dpb_frames</code> 的 默认值16</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int32_t</span> <span class="nf">ComputeReorderWindow</span><span class="p">(</span><span class="k">const</span> <span class="n">H264SPS</span><span class="o">*</span> <span class="n">sps</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// When |pic_order_cnt_type| == 2, decode order always matches presentation</span>
</span><span class='line'>  <span class="c1">// order.</span>
</span><span class='line'>  <span class="c1">// TODO(sandersd): For |pic_order_cnt_type| == 1, analyze the delta cycle to</span>
</span><span class='line'>  <span class="c1">// find the minimum required reorder window.</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">sps</span><span class="o">-&gt;</span><span class="n">pic_order_cnt_type</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// TODO(sandersd): Compute MaxDpbFrames.</span>
</span><span class='line'>  <span class="kt">int32_t</span> <span class="n">max_dpb_frames</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// See AVC spec section E.2.1 definition of |max_num_reorder_frames|.</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">sps</span><span class="o">-&gt;</span><span class="n">vui_parameters_present_flag</span> <span class="o">&amp;&amp;</span> <span class="n">sps</span><span class="o">-&gt;</span><span class="n">bitstream_restriction_flag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span><span class="n">sps</span><span class="o">-&gt;</span><span class="n">max_num_reorder_frames</span><span class="p">,</span> <span class="n">max_dpb_frames</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">sps</span><span class="o">-&gt;</span><span class="n">constraint_set3_flag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sps</span><span class="o">-&gt;</span><span class="n">profile_idc</span> <span class="o">==</span> <span class="mi">44</span> <span class="o">||</span> <span class="n">sps</span><span class="o">-&gt;</span><span class="n">profile_idc</span> <span class="o">==</span> <span class="mi">86</span> <span class="o">||</span>
</span><span class='line'>        <span class="n">sps</span><span class="o">-&gt;</span><span class="n">profile_idc</span> <span class="o">==</span> <span class="mi">100</span> <span class="o">||</span> <span class="n">sps</span><span class="o">-&gt;</span><span class="n">profile_idc</span> <span class="o">==</span> <span class="mi">110</span> <span class="o">||</span>
</span><span class='line'>        <span class="n">sps</span><span class="o">-&gt;</span><span class="n">profile_idc</span> <span class="o">==</span> <span class="mi">122</span> <span class="o">||</span> <span class="n">sps</span><span class="o">-&gt;</span><span class="n">profile_idc</span> <span class="o">==</span> <span class="mi">244</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">max_dpb_frames</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>vlc</h2>

<p>vlc 的逻辑和 chrome 类似，多了一个根据 level 计算 <code>max_dpb_frames</code></p>

<ol>
<li>判断是否有 <code>vuiParameters</code>，取 <code>max_num_reorder_frames</code></li>
<li>然后是特定的 profile，不需要排序</li>
<li>最后计算 <code>max_dpb_frames</code></li>
</ol>


<p>代码文件在<a href="https://github.com/videolan/vlc/blob/d7ff28e96eb2cb64c5b1a502443a24229532a449/modules/packetizer/h264_nal.c#L735">h264_nal.c</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">uint8_t</span> <span class="nf">h264_get_max_dpb_frames</span><span class="p">(</span> <span class="k">const</span> <span class="kt">h264_sequence_parameter_set_t</span> <span class="o">*</span><span class="n">p_sps</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">h264_level_limits_t</span> <span class="o">*</span><span class="n">limits</span> <span class="o">=</span> <span class="n">h264_get_level_limits</span><span class="p">(</span> <span class="n">p_sps</span> <span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">limits</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="n">i_frame_height_in_mbs</span> <span class="o">=</span> <span class="p">(</span> <span class="n">p_sps</span><span class="o">-&gt;</span><span class="n">pic_height_in_map_units_minus1</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">)</span> <span class="o">*</span>
</span><span class='line'>                                         <span class="p">(</span> <span class="mi">2</span> <span class="o">-</span> <span class="n">p_sps</span><span class="o">-&gt;</span><span class="n">frame_mbs_only_flag</span> <span class="p">);</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="n">i_den</span> <span class="o">=</span> <span class="p">(</span> <span class="n">p_sps</span><span class="o">-&gt;</span><span class="n">pic_width_in_mbs_minus1</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">)</span> <span class="o">*</span> <span class="n">i_frame_height_in_mbs</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">uint8_t</span> <span class="n">i_max_dpb_frames</span> <span class="o">=</span> <span class="n">limits</span><span class="o">-&gt;</span><span class="n">i_max_dpb_mbs</span> <span class="o">/</span> <span class="n">i_den</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">i_max_dpb_frames</span> <span class="o">&lt;</span> <span class="mi">16</span> <span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">i_max_dpb_frames</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">16</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">h264_get_dpb_values</span><span class="p">(</span> <span class="k">const</span> <span class="kt">h264_sequence_parameter_set_t</span> <span class="o">*</span><span class="n">p_sps</span><span class="p">,</span>
</span><span class='line'>                          <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">pi_depth</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="o">*</span><span class="n">pi_delay</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">uint8_t</span> <span class="n">i_max_num_reorder_frames</span> <span class="o">=</span> <span class="n">p_sps</span><span class="o">-&gt;</span><span class="n">vui</span><span class="p">.</span><span class="n">i_max_num_reorder_frames</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">p_sps</span><span class="o">-&gt;</span><span class="n">vui</span><span class="p">.</span><span class="n">b_bitstream_restriction_flag</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span> <span class="n">p_sps</span><span class="o">-&gt;</span><span class="n">i_profile</span> <span class="p">)</span> <span class="cm">/* E-2.1 */</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">PROFILE_H264_BASELINE</span><span class="p">:</span>
</span><span class='line'>                <span class="n">i_max_num_reorder_frames</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* only I &amp; P */</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">PROFILE_H264_CAVLC_INTRA</span><span class="p">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">PROFILE_H264_SVC_HIGH</span><span class="p">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">PROFILE_H264_HIGH</span><span class="p">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">PROFILE_H264_HIGH_10</span><span class="p">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">PROFILE_H264_HIGH_422</span><span class="p">:</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">PROFILE_H264_HIGH_444_PREDICTIVE</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">p_sps</span><span class="o">-&gt;</span><span class="n">i_constraint_set_flags</span> <span class="o">&amp;</span> <span class="n">H264_CONSTRAINT_SET_FLAG</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">i_max_num_reorder_frames</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* all IDR */</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="cm">/* fallthrough */</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="n">i_max_num_reorder_frames</span> <span class="o">=</span> <span class="n">h264_get_max_dpb_frames</span><span class="p">(</span> <span class="n">p_sps</span> <span class="p">);</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">*</span><span class="n">pi_depth</span> <span class="o">=</span> <span class="n">i_max_num_reorder_frames</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">pi_delay</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>MediaCodec</h2>

<p><code>MediaCodec</code> 和 <code>vlc</code>/<code>Chrome</code>也差不多，计算<code>max_dpb_frames</code>的时候考虑了<code>max_num_ref_frames</code>和<code>max_dec_frame_buffering</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">bool</span> <span class="n">H264Decoder</span><span class="o">::</span><span class="n">ProcessSPS</span><span class="p">(</span><span class="kt">int</span> <span class="n">sps_id</span><span class="p">,</span> <span class="kt">bool</span><span class="o">*</span> <span class="n">need_new_buffers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">DVLOG</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Processing SPS id:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">sps_id</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">const</span> <span class="n">H264SPS</span><span class="o">*</span> <span class="n">sps</span> <span class="o">=</span> <span class="n">parser_</span><span class="p">.</span><span class="n">GetSPS</span><span class="p">(</span><span class="n">sps_id</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sps</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">*</span><span class="n">need_new_buffers</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">sps</span><span class="o">-&gt;</span><span class="n">frame_mbs_only_flag</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DVLOG</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;frame_mbs_only_flag != 1 not supported&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Size</span> <span class="n">new_pic_size</span> <span class="o">=</span> <span class="n">sps</span><span class="o">-&gt;</span><span class="n">GetCodedSize</span><span class="p">().</span><span class="n">value_or</span><span class="p">(</span><span class="n">Size</span><span class="p">());</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">new_pic_size</span><span class="p">.</span><span class="n">IsEmpty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DVLOG</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Invalid picture size&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">width_mb</span> <span class="o">=</span> <span class="n">new_pic_size</span><span class="p">.</span><span class="n">width</span><span class="p">()</span> <span class="o">/</span> <span class="mi">16</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">height_mb</span> <span class="o">=</span> <span class="n">new_pic_size</span><span class="p">.</span><span class="n">height</span><span class="p">()</span> <span class="o">/</span> <span class="mi">16</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Verify that the values are not too large before multiplying.</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">max</span><span class="p">()</span> <span class="o">/</span> <span class="n">width_mb</span> <span class="o">&lt;</span> <span class="n">height_mb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DVLOG</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Picture size is too big: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">new_pic_size</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">level</span> <span class="o">=</span> <span class="n">sps</span><span class="o">-&gt;</span><span class="n">level_idc</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">max_dpb_mbs</span> <span class="o">=</span> <span class="n">LevelToMaxDpbMbs</span><span class="p">(</span><span class="n">level</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">max_dpb_mbs</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MaxDpbFrames from level limits per spec.</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">max_dpb_frames</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span><span class="n">max_dpb_mbs</span> <span class="o">/</span> <span class="p">(</span><span class="n">width_mb</span> <span class="o">*</span> <span class="n">height_mb</span><span class="p">),</span>
</span><span class='line'>                                   <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">H264DPB</span><span class="o">::</span><span class="n">kDPBMaxSize</span><span class="p">));</span>
</span><span class='line'>  <span class="n">DVLOG</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;MaxDpbFrames: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">max_dpb_frames</span>
</span><span class='line'>           <span class="o">&lt;&lt;</span> <span class="s">&quot;, max_num_ref_frames: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">sps</span><span class="o">-&gt;</span><span class="n">max_num_ref_frames</span>
</span><span class='line'>           <span class="o">&lt;&lt;</span> <span class="s">&quot;, max_dec_frame_buffering: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">sps</span><span class="o">-&gt;</span><span class="n">max_dec_frame_buffering</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Set DPB size to at least the level limit, or what the stream requires.</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">max_dpb_size</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">max_dpb_frames</span><span class="p">),</span>
</span><span class='line'>               <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">sps</span><span class="o">-&gt;</span><span class="n">max_num_ref_frames</span><span class="p">,</span> <span class="n">sps</span><span class="o">-&gt;</span><span class="n">max_dec_frame_buffering</span><span class="p">));</span>
</span><span class='line'>  <span class="c1">// Some non-conforming streams specify more frames are needed than the current</span>
</span><span class='line'>  <span class="c1">// level limit. Allow this, but only up to the maximum number of reference</span>
</span><span class='line'>  <span class="c1">// frames allowed per spec.</span>
</span><span class='line'>  <span class="n">DVLOG_IF</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">max_dpb_size</span> <span class="o">&gt;</span> <span class="n">max_dpb_frames</span><span class="p">)</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;Invalid stream, DPB size &gt; MaxDpbFrames&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">max_dpb_size</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">max_dpb_size</span> <span class="o">&gt;</span> <span class="n">H264DPB</span><span class="o">::</span><span class="n">kDPBMaxSize</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DVLOG</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Invalid DPB size: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">max_dpb_size</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">pic_size_</span> <span class="o">!=</span> <span class="n">new_pic_size</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">dpb_</span><span class="p">.</span><span class="n">max_num_pics</span><span class="p">()</span> <span class="o">!=</span> <span class="n">max_dpb_size</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">Flush</span><span class="p">())</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="n">DVLOG</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Codec level: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">level</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, DPB size: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">max_dpb_size</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="s">&quot;, Picture size: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">new_pic_size</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
</span><span class='line'>    <span class="o">*</span><span class="n">need_new_buffers</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pic_size_</span> <span class="o">=</span> <span class="n">new_pic_size</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dpb_</span><span class="p">.</span><span class="n">set_max_num_pics</span><span class="p">(</span><span class="n">max_dpb_size</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Rect</span> <span class="n">new_visible_rect</span> <span class="o">=</span> <span class="n">sps</span><span class="o">-&gt;</span><span class="n">GetVisibleRect</span><span class="p">().</span><span class="n">value_or</span><span class="p">(</span><span class="n">Rect</span><span class="p">());</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">visible_rect_</span> <span class="o">!=</span> <span class="n">new_visible_rect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DVLOG</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;New visible rect: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">new_visible_rect</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
</span><span class='line'>    <span class="n">visible_rect_</span> <span class="o">=</span> <span class="n">new_visible_rect</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">UpdateMaxNumReorderFrames</span><span class="p">(</span><span class="n">sps</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="n">DVLOG</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;max_num_reorder_frames: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">max_num_reorder_frames_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">H264Decoder</span><span class="o">::</span><span class="n">UpdateMaxNumReorderFrames</span><span class="p">(</span><span class="k">const</span> <span class="n">H264SPS</span><span class="o">*</span> <span class="n">sps</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">sps</span><span class="o">-&gt;</span><span class="n">vui_parameters_present_flag</span> <span class="o">&amp;&amp;</span> <span class="n">sps</span><span class="o">-&gt;</span><span class="n">bitstream_restriction_flag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">max_num_reorder_frames_</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">base</span><span class="o">::</span><span class="n">checked_cast</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">sps</span><span class="o">-&gt;</span><span class="n">max_num_reorder_frames</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">max_num_reorder_frames_</span> <span class="o">&gt;</span> <span class="n">dpb_</span><span class="p">.</span><span class="n">max_num_pics</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">DVLOG</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>          <span class="o">&lt;&lt;</span> <span class="s">&quot;max_num_reorder_frames present, but larger than MaxDpbFrames (&quot;</span>
</span><span class='line'>          <span class="o">&lt;&lt;</span> <span class="n">max_num_reorder_frames_</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &gt; &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">dpb_</span><span class="p">.</span><span class="n">max_num_pics</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;)&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">max_num_reorder_frames_</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// max_num_reorder_frames not present, infer from profile/constraints</span>
</span><span class='line'>  <span class="c1">// (see VUI semantics in spec).</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">sps</span><span class="o">-&gt;</span><span class="n">constraint_set3_flag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">sps</span><span class="o">-&gt;</span><span class="n">profile_idc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">44</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">86</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">100</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">110</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">122</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">244</span><span class="o">:</span>
</span><span class='line'>        <span class="n">max_num_reorder_frames_</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="n">max_num_reorder_frames_</span> <span class="o">=</span> <span class="n">dpb_</span><span class="p">.</span><span class="n">max_num_pics</span><span class="p">();</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">max_num_reorder_frames_</span> <span class="o">=</span> <span class="n">dpb_</span><span class="p">.</span><span class="n">max_num_pics</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>sps.level 计算</h1>

<p><code>vlc</code>和<code>MediaCodec</code> 都计算得出<code>dpb.max_num_pics</code>，拿这个值保底<br/>
<a href="https://github.com/GStreamer/gst-plugins-bad/blob/bc128d610063a266a1b715e5a696ca252f2d5a74/sys/applemedia/vtdec.c#L962">gst-plugins-bad</a> 只通过 level 计算，计算部分和 <code>MediaCodec</code>一样。</p>

<h1>设置为4</h1>

<p><a href="https://juejin.im/post/5d1385c751882532531bca11">iOS解码关于视频中带B帧排序问题</a></p>

<h1>HEVC</h1>

<p>vlc 中还有 <code>HEVC(H265)</code> 视频获取 <code>max_num_reorder</code> 的方式，代码文件在<a href="https://github.com/videolan/vlc/blob/b525b27e85f1f2cec0fe9b38e08f5dee698a893e/modules/packetizer/hevc_nal.c#L1111">hevc_nal.c</a></p>

<h1>FFmpeg</h1>

<p><a href="https://github.com/FFmpeg/FFmpeg/blob/177c68e3496e0d807641110f2a76d25ad71e45bb/libavcodec/h264_slice.c#L1336">h264</a><br/>
<a href="https://github.com/FFmpeg/FFmpeg/blob/177c68e3496e0d807641110f2a76d25ad71e45bb/libavcodec/hevc_refs.c#L174">h265</a></p>

<h1>总结</h1>

<ul>
<li><code>Chrome</code>，<code>vlc</code>，<code>MediaCodec</code>的策略几乎一致，<code>MediaCodec</code>逻辑最完整。</li>
<li><code>vlc</code>还处理了<code>hevc</code>的<code>max_num_reorder</code></li>
</ul>


<h1>Link</h1>

<p><a href="https://github.com/bilibili/ijkplayer/blob/cced91e3ae3730f5c63f3605b00d25eafcf5b97b/ios/IJKMediaPlayer/IJKMediaPlayer/ijkmedia/ijkplayer/ios/pipeline/h264_sps_parser.h#L267">ijkplayer</a><br/>
<a href="https://cs.chromium.org/">Chrome</a><br/>
<a href="https://github.com/videolan/vlc">vlc</a><br/>
<a href="https://cs.android.com/">Android</a><br/>
<a href="https://github.com/FFmpeg/FFmpeg">FFmpeg</a><br/>
<a href="https://juejin.im/post/5d1385c751882532531bca11">iOS解码关于视频中带B帧排序问题</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS NV12转SkImage颜色不正常的问题]]></title>
    <link href="http://lvpengwei.github.io//blog/2020/03/07/ios-nv12zhuan-skimageyan-se-bu-zheng-chang-de-wen-ti/"/>
    <updated>2020-03-07T11:01:32+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2020/03/07/ios-nv12zhuan-skimageyan-se-bu-zheng-chang-de-wen-ti</id>
    <content type="html"><![CDATA[<h1>环境</h1>

<p>设备：iPhone 6s<br/>
系统：13.1<br/>
Skia版本：m62<br/>
视频的YUV ColorSpace：ITU-R BT.601</p>

<h1>现象</h1>

<p>VideoToolbox 配置的 pixelFormat 是<code>kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange</code>，然后把输出的 pixelBuffer 用下面的代码片段1转成 NV12，再使用代码片段2转成 SkImage，在 SkCanvas 上 draw 出来如图1，视频原图如图2。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">uint32_t</span> <span class="n">pixelFormatType</span> <span class="o">=</span> <span class="n">kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 代码片段1</span>
</span><span class='line'><span class="c1">// Y 数据</span>
</span><span class='line'><span class="n">CVOpenGLESTextureCacheCreateTextureFromImage</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">textCache</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">pixelBuffer</span><span class="p">,</span>
</span><span class='line'>                                             <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">GL_TEXTURE_2D</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">GL_LUMINANCE</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">width</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">height</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">GL_LUMINANCE</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">GL_UNSIGNED_BYTE</span><span class="p">,</span>
</span><span class='line'>                                             <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                                             <span class="o">&amp;</span><span class="n">outputTextureLuma</span><span class="p">);</span>
</span><span class='line'><span class="c1">// UV 数据</span>
</span><span class='line'><span class="n">CVOpenGLESTextureCacheCreateTextureFromImage</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">textCache</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">pixelBuffer</span><span class="p">,</span>
</span><span class='line'>                                             <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">GL_TEXTURE_2D</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">GL_LUMINANCE_ALPHA</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">GL_LUMINANCE_ALPHA</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">GL_UNSIGNED_BYTE</span><span class="p">,</span>
</span><span class='line'>                                             <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                             <span class="o">&amp;</span><span class="n">outputTextureChroma</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// 代码片段2</span>
</span><span class='line'><span class="n">GrGLTextureInfo</span> <span class="n">textureInfo1</span> <span class="o">=</span> <span class="p">{</span><span class="n">videoImage</span><span class="o">-&gt;</span><span class="n">textureTarget</span><span class="p">(),</span> <span class="n">videoImage</span><span class="o">-&gt;</span><span class="n">getTextureID</span><span class="p">(</span><span class="mi">0</span><span class="p">)};</span>
</span><span class='line'><span class="n">GrGLTextureInfo</span> <span class="n">textureInfo2</span> <span class="o">=</span> <span class="p">{</span><span class="n">videoImage</span><span class="o">-&gt;</span><span class="n">textureTarget</span><span class="p">(),</span> <span class="n">videoImage</span><span class="o">-&gt;</span><span class="n">getTextureID</span><span class="p">(</span><span class="mi">1</span><span class="p">)};</span>
</span><span class='line'><span class="n">GrBackendObject</span> <span class="n">nv12TextureHandles</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">GrBackendObject</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">textureInfo1</span><span class="p">),</span>
</span><span class='line'>                                        <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">GrBackendObject</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">textureInfo2</span><span class="p">)};</span>
</span><span class='line'><span class="n">SkISize</span> <span class="n">nv12Sizes</span><span class="p">[]</span> <span class="o">=</span> <span class="err">\</span><span class="p">{</span><span class="err">\</span><span class="p">{</span><span class="n">videoImage</span><span class="o">-&gt;</span><span class="n">width</span><span class="p">(),</span> <span class="n">videoImage</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">()</span><span class="err">\</span><span class="p">},</span>
</span><span class='line'>                       <span class="err">\</span><span class="p">{</span><span class="n">videoImage</span><span class="o">-&gt;</span><span class="n">width</span><span class="p">(),</span> <span class="n">videoImage</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">()</span><span class="err">\</span><span class="p">}</span><span class="err">\</span><span class="p">};</span>
</span><span class='line'><span class="n">skImage</span> <span class="o">=</span> <span class="n">SkImage</span><span class="o">::</span><span class="n">MakeFromNV12TexturesCopy</span><span class="p">(</span><span class="n">grContext</span><span class="p">,</span>
</span><span class='line'>                                            <span class="n">kRec601_SkYUVColorSpace</span><span class="p">,</span>
</span><span class='line'>                                            <span class="n">nv12TextureHandles</span><span class="p">,</span>
</span><span class='line'>                                            <span class="n">nv12Sizes</span><span class="p">,</span>
</span><span class='line'>                                            <span class="n">kTopLeft_GrSurfaceOrigin</span><span class="p">,</span>
</span><span class='line'>                                            <span class="k">nullptr</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://lvpengwei.github.io//images/20200307/nv12_ra.png" alt="图1" />
<img src="http://lvpengwei.github.io//images/20200307/nv12_rg.png" alt="图2" /></p>

<h1>查问题</h1>

<h4>1. 查视频的 YUV ColorSpace 是否和 SkImage 对应</h4>

<p>是一致的，但输出的图像还是有问题。</p>

<h3>2.试试把 VideoToolbox 的输出格式换成 RGBA</h3>

<p>配置 VideoToolbox 的 pixelFormat 为 <code>kCVPixelFormatType_32BGRA</code>，使用代码片段3把 pixelBuffer 转成 RGBA 纹理，然后使用代码片段4转成 SkImage，图像是正常的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">uint32_t</span> <span class="n">pixelFormatType</span> <span class="o">=</span> <span class="n">kCVPixelFormatType_32BGRA</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 代码片段3</span>
</span><span class='line'><span class="n">CVOpenGLESTextureCacheCreateTextureFromImage</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">textCache</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">pixelBuffer</span><span class="p">,</span>
</span><span class='line'>                                             <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">GL_TEXTURE_2D</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">GL_RGBA</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">width</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">height</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">GL_BGRA</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">GL_UNSIGNED_BYTE</span><span class="p">,</span>
</span><span class='line'>                                             <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                                             <span class="o">&amp;</span><span class="n">outputTextureLuma</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// 代码片段4</span>
</span><span class='line'><span class="n">GrGLTextureInfo</span> <span class="n">textureInfo</span> <span class="o">=</span> <span class="p">{</span><span class="n">videoImage</span><span class="o">-&gt;</span><span class="n">textureTarget</span><span class="p">(),</span> <span class="n">videoImage</span><span class="o">-&gt;</span><span class="n">getTextureID</span><span class="p">(</span><span class="mi">0</span><span class="p">)};</span>
</span><span class='line'><span class="n">GrBackendTexture</span> <span class="nf">backendTexture</span><span class="p">(</span><span class="n">videoImage</span><span class="o">-&gt;</span><span class="n">width</span><span class="p">(),</span> <span class="n">videoImage</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">(),</span> <span class="n">kRGBA_8888_GrPixelConfig</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">textureInfo</span><span class="p">);</span>
</span><span class='line'><span class="n">skImage</span> <span class="o">=</span>  <span class="n">SkImage</span><span class="o">::</span><span class="n">MakeFromTexture</span><span class="p">(</span><span class="n">grContext</span><span class="p">,</span> <span class="n">backendTexture</span><span class="p">,</span> <span class="n">kTopLeft_GrSurfaceOrigin</span><span class="p">,</span>
</span><span class='line'>                                    <span class="n">kPremul_SkAlphaType</span><span class="p">,</span> <span class="k">nullptr</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.查 Skia 源码</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// SkImage_Gpu.cpp</span>
</span><span class='line'><span class="c1">// SkImage::MakeFromNV12TexturesCopy -&gt; make_from_yuv_textures_copy</span>
</span><span class='line'><span class="c1">// GrYUVEffect.cpp</span>
</span><span class='line'><span class="c1">// GrYUVEffect::MakeYUVToRGB -&gt; YUVtoRGBEffect::Make -&gt; YUVtoRGBEffect() -&gt; onCreateGLSLInstance() -&gt; GLSLProcessor -&gt; shader &#39;.rg&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>从 Skia 的源码中一直跟下去，发现最后 shader 使用的是 <code>rg</code> 通道，而因为我们是用 <code>GL_LUMINANCE_ALPHA</code> 来获取 <code>UV</code> 数据，在 GLSL 中应该使用 <code>ra</code> 通道，所以出现了不一致。当使用<code>GL_RG</code>获取<code>UV</code>数据的时候（代码片段5），SkImage 输出的图片就正常了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 代码片段5</span>
</span><span class='line'><span class="c1">// UV 数据</span>
</span><span class='line'><span class="n">CVOpenGLESTextureCacheCreateTextureFromImage</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">textCache</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">pixelBuffer</span><span class="p">,</span>
</span><span class='line'>                                             <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">GL_TEXTURE_2D</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">GL_RG</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">GL_RG</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">GL_UNSIGNED_BYTE</span><span class="p">,</span>
</span><span class='line'>                                             <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                             <span class="o">&amp;</span><span class="n">outputTextureChroma</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Link</h1>

<p><a href="https://github.com/google/skia">skia</a><br/>
<a href="https://juejin.im/entry/5cbac68c6fb9a0688c039ebc">GL 移植到 Metal 的小细节</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App 多区域皮肤（主题）的实现]]></title>
    <link href="http://lvpengwei.github.io//blog/2019/07/08/app-duo-qu-yu-pi-fu-(zhu-ti-)de-shi-xian/"/>
    <updated>2019-07-08T21:58:47+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2019/07/08/app-duo-qu-yu-pi-fu-(zhu-ti-)de-shi-xian</id>
    <content type="html"><![CDATA[<h2>需求</h2>

<p>App 里可以皮肤化的 UI 区域分为 3 块（App 皮肤/阅读器主题/其他），这 3 块又和黑夜模式有重叠。</p>

<ul>
<li>App 皮肤区域有首页 4 个 tab bar 页面（还没有实现主题化，在规划中）</li>
<li>阅读器主题区域主要是阅读器相关的设置和菜单页面</li>
<li>其他指不需要主题化的区域</li>
</ul>


<p><img src="https://i.loli.net/2019/03/31/5ca0a5f084143.png" alt="" /></p>

<h2>第一种方案</h2>

<p>主要思路就是给 UIKit 的 Category 增加一些属性，配置每一类主题的 key，在第一次赋值或者收到主题改变的通知时进行 apply。</p>

<p><img src="https://i.loli.net/2019/03/31/5ca0a5f08618e.png" alt="" />
<img src="https://i.loli.net/2019/03/28/5c9c9e7aec27f.png" alt="" /></p>

<blockquote><p>qd 是黑夜模式前缀，readerTheme 是阅读器主题前缀</p></blockquote>

<p>这种方案的问题是
- 如果要增加一类主题（比如 App 皮肤类），需要把所有之前增加的属性都 copy 一下（包括 apply 部分的代码），工作量很大。
- 如果要增加一个新的属性，需要添加多遍（前缀分别是qd/readerTheme/app）。</p>

<h2>重构之后的方案</h2>

<blockquote><p>借助 OC 的泛型和  KVC 的一次重构</p></blockquote>

<p><img src="https://i.loli.net/2019/03/31/5ca0a5f095a1a.png" alt="" />
<img src="https://i.loli.net/2019/04/17/5cb6d05c376eb.jpg" alt="" /></p>

<h2>重构前后对比</h2>

<p><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g1mx1031r9j31d30u07u7.jpg" alt="" /></p>

<p>代码实现样例：<a href="https://github.com/lvpengwei/LVThemeKit">LVThemeKit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS&amp;Android 播放透明视频]]></title>
    <link href="http://lvpengwei.github.io//blog/2019/07/08/ios-and-android-bo-fang-tou-ming-shi-pin/"/>
    <updated>2019-07-08T21:49:54+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2019/07/08/ios-and-android-bo-fang-tou-ming-shi-pin</id>
    <content type="html"><![CDATA[<p>在 iOS &amp; Android 上播放带 alpha 的 mp4 视频，用来代替序列帧动画(png/webp)，素材小，播放也流畅。</p>

<p>用滤镜就可以完成，Demo 地址：<br/>
<a href="https://github.com/lvpengwei/AlphaVideoiOS">iOS</a><br/>
<a href="https://github.com/lvpengwei/ExoPlayerFilter">Android</a></p>

<p><a href="https://felgo.com/doc/felgo-alphavideo/#how-to-create-an-alpha-video">如何使用 AE 制作带 alpha 的 mp4</a></p>

<p>原理：因为视频只有 rgb，没有 a，所以制作两个视频，第一个是原视频，第二个是纯黑白的边界视频，然后把两个视频合成一个，目的是保证帧对应。第一个视频的 rgb 是 0~1 的 float 值，第二个视频的 rgb 要么全是 1，要么全是 0。在客户端进行渲染的时候，写一个滤镜，目标像素 rgba 在取值的时候，rgb 使用第一个视频的 rgb，a 使用第二个视频的 r，就可以完成播放透明视频。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gl_FragColor = vec4(color1.rgb, color2.r);</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[导出迪斯尼乐拍通里的照片]]></title>
    <link href="http://lvpengwei.github.io//blog/2016/12/31/dao-chu-di-si-ni-le-pai-tong-li-de-zhao-pian/"/>
    <updated>2016-12-31T20:42:21+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2016/12/31/dao-chu-di-si-ni-le-pai-tong-li-de-zhao-pian</id>
    <content type="html"><![CDATA[<blockquote><p>迪斯尼乐拍通App里面的照片导出收费，而且费用很高，我通过抓包拿到App里面的图片链接然后使用脚本下载解析得到高清的图片（非原图）
代码：<a href="https://github.com/lvpengwei/Disneyphotopass-export">Disneyphotopass-export</a></p></blockquote>

<h3>过程</h3>

<ol>
<li><strong>抓包</strong>：使用Charles拿到某张图片的链接，下载下来之后发现是另外一个图片，如下图，这时候就蛋疼了，那我需要的那张图去哪了，而且这张图片的分辨率不高，按理说不会这么大，那么猜测我需要的那张图就藏在这返回的数据里面   <br/>
<img src="http://www.disneyphotopass.com.cn:4000/media/d14acc0d4a274d3154486fe481c634dbfff6cffcf8681e56bfb8fd8f03648f0616a3ce5b8a0ee8d8890cb2c68dfe6a466d20010501d7d081d21c2941b053a89d72d589b23d5caffdd71cf7564126e5db538a3998bf98b4cc39ae265aa5676705" alt="enter image description here" /></li>
<li><strong>隐写术</strong>：之前不知道这个概念，所以我就进行了各种尝试去找

<ul>
<li>是否是gif</li>
<li>使用iOS ImageIO的API去看是不是在图片的exif里面</li>
<li>然后问了伟哥，是否有方法把一张图片放在另外一张图片里，伟哥说“有好多图片隐写的方法你可以搜一下”   <br/>
算是找到了这种方案的一个术语-<strong>隐写</strong>，然后发现其中一种隐写方法的解析工具<a href="https://github.com/devttys0/binwalk">binwork</a>，拿出之前下载的图片试一下，果然里面放了两张图片，如下图
<img src="http://lvpengwei.github.io//images/20161231/E7997AA4-F8CF-41E5-A10E-CF3C205B45F1.png" width="500" alt="enter image description here" /></li>
</ul>
</li>
<li><strong>解析</strong>：使用命令可以解出想要的图片<code>dd if=image-download/1 bs=1 skip=10103 of=image/1.jpg</code>
<img src="http://lvpengwei.github.io//images/20161231/80F75B59-CAC7-427B-9E19-2C31B19BA0DE.png" width="500" alt="enter image description here" /></li>
</ol>


<h3>脚本</h3>

<p>然后把这个过程写成一个脚本，输入是一行一个链接的文本，输出是想要的图片，脚本来做下载和解析。</p>

<h3>tokenId获取</h3>

<p>脚本可以自动收集链接，需要抓包获取tokenId</p>

<ol>
<li>使用浏览器(Chrome)：登录网页版<a href="https://disneyphotopass.com.cn/">乐拍通</a>，然后<code>检查(Inspect)</code>去<code>网络(Network)</code>里找</li>
<li>乐拍通App抓包</li>
</ol>


<h3>链接的收集(Deprecated)</h3>

<p>给手机设上代理，打开乐拍通，进入图片详情，然后一张一张滑过去，然后过滤一下，全选，右击，Copy URLs，然后粘在一个<code>disneyphotopass</code>文档里，执行脚本，就可以了。
<img src="http://lvpengwei.github.io//images/20161231/8E02B64D-EC99-438C-B354-3F87C3DCB6BE.png" width="500" alt="enter image description here" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS APP的简单Web Interface应用]]></title>
    <link href="http://lvpengwei.github.io//blog/2016/06/13/ios-appde-jian-dan-web-interfaceying-yong/"/>
    <updated>2016-06-13T17:28:28+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2016/06/13/ios-appde-jian-dan-web-interfaceying-yong</id>
    <content type="html"><![CDATA[<pre><code>  最近接了一个内部工具开发的需求：运营人员需要生成商品尺码图片，之前他们是用PS做的，现在想让我们做个程序工具化这个过程。
</code></pre>

<p>刚拿到这个需求，分析之后，想了两个方案：</p>

<ol>
<li>APP生成图片，导出到电脑</li>
<li>h5生成图片save到电脑</li>
<li>脚本生成，因为UI比较复杂，需要获取数据，所以排除</li>
</ol>


<p>由于对APP开发比较熟悉，所以尝试着用客户端去做，生成图片不难，关键是如何导出到电脑上，当时的思路是</p>

<ol>
<li>iOS的话保存到相册用AirDrop去传</li>
<li>Android保存到SD卡上，用PC上的软件导出</li>
<li>打成zip包，客户端起一个server，把zip download下来</li>
</ol>


<p>本着操作简洁的原则，开始探索第三种方案。</p>

<p>一个程序，对用户来说只要有输入和输出就行了，中间不需要什么过多的介入，这才是优化流程的意义所在。</p>

<p>在这个例子中，输入是商品id数组，输出是一个zip包。</p>

<p>设计流程是：接收一个商品id数组，开始进行处理，最终输出一张图片save到Documents的一个文件夹下，然后进行zip打包，最后进行下载。</p>

<p>遇到的问题：</p>

<p>1.iOS的<code>AutoLayout</code>，图片的模板是用<code>AutoLayout</code>实现，变高(基于<code>AutoLayout</code>中<code>view</code>的<code>ContentSize</code>概念)。问题就是截图的时候会报警告，然后出的图是空的，debug之后，发现是view赋值之后没有进行layout，所以size是<code>CGSizeZero</code>的，截图时得到的context是0x0，之前在项目中，没有出现此问题，是因为view一般都会有superview，而superview在layout的时候subview也会layout。这里的view没有superview，所以没人触发它的layout过程，加了两行代码，完成。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[self setNeedsUpdateConstraints];
</span><span class='line'>[self layoutIfNeeded];</span></code></pre></td></tr></table></div></figure>


<p>2.在提交商品id数组之后，如果处理过程是异步的，那么如何通知用户是个问题，本来打算是手机local notification通知，但是我们这个APP直接部署在局域网的Mac Pro的模拟器里面，不需要用户安装，而web页面做push操作比较麻烦，所以采用同步处理，也就是说，提交过商品id数组之后页面一直loading，直到处理完毕，给出下一个页面。在APP端，商品信息的加载和商品主图的加载也是异步的，那么怎么才能在一个请求中做同步呢，也就是收到web请求的时候，提交到一个manager中去处理这部分商品，但是这里sleep掉，等那边处理完毕之后，再唤醒接着返回response，于是就想到了iOS的<code>Runloop</code>这个机制。代码如下：</p>

<p><code>MyHTTPConnection.m</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSPort *port = [NSMachPort port];
</span><span class='line'>[[NSRunLoop currentRunLoop] addPort:port forMode:NSDefaultRunLoopMode];
</span><span class='line'>[ExportImageManager sharedInstance].thread = [NSThread currentThread];
</span><span class='line'>[[ExportImageManager sharedInstance] createImageWithGoodsIds:goodsIdArr];
</span><span class='line'>while (![ExportImageManager sharedInstance].completed) {
</span><span class='line'>    NSLog(@"runloop start......");
</span><span class='line'>    [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];
</span><span class='line'>    NSLog(@"runloop end......");
</span><span class='line'>}
</span><span class='line'>[[NSRunLoop currentRunLoop] removePort:port forMode:NSDefaultRunLoopMode];
</span><span class='line'>CFRunLoopStop(CFRunLoopGetCurrent());
</span><span class='line'>[ExportImageManager sharedInstance].thread = nil;</span></code></pre></td></tr></table></div></figure>


<p>注解：
这块代码执行的环境是在HTTPServer的队列里面，所以在哪个线程中是未知的，线程中的runloop默认是不开启的，所以在这里，做了几件事</p>

<ol>
<li>声明一个port放在runloop中，防止runloop中没有任何输入源会直接退出</li>
<li>把当前所在的thread赋给manager，当处理完成的时候，在这个thread上performSelector，唤醒runloop</li>
<li>在while循环中启动runloop</li>
<li>把之前的port remove掉</li>
<li>把runloop停掉</li>
<li>之前引用的thread清空</li>
</ol>


<p>最终实现，3个操作步骤</p>

<ol>
<li><code>localhost:8081/create?id,id,id,id</code> 图片生成请求，response返回的时候处理结束，会在<code>Documents/export/</code>的文件夹下生成以商品id命名的图片</li>
<li><code>localhost:8081/zip</code> 将<code>Documents/export</code>打包成<code>Documents/export.zip</code> 并删除<code>Documents/export</code></li>
<li><code>localhost:8081/export.zip</code> 下载zip</li>
</ol>


<p>其实可以把打包操作合并在第一步中。缩减为两步</p>

<p><strong>思路来源是，QQ阅读传pdf的时候是在电脑上打开一个网页，然后把文件拖进去就可以同步到手机。实现之后发现，这个功能和<code>Charles</code>的<code>Web Interface</code>功能一样。。</strong></p>

<p>项目地址：<a href="https://github.com/lvpengwei/ExportGoodsImage">https://github.com/lvpengwei/ExportGoodsImage</a></p>

<p><img src="http://lvpengwei.github.io//images/20160613/3834834005.png" width="500" alt="Simulator Screen Shot Jun 13, 2016, 17.00.33.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android坐标系学习案例(与iOS进行对比)]]></title>
    <link href="http://lvpengwei.github.io//blog/2016/03/19/androidzuo-biao-xi-xue-xi-an-li-yu-iosjin-xing-dui-bi/"/>
    <updated>2016-03-19T01:27:38+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2016/03/19/androidzuo-biao-xi-xue-xi-an-li-yu-iosjin-xing-dui-bi</id>
    <content type="html"><![CDATA[<p>问题: 判断parent view中的手势是否出现在旋转之后的subview的范围中的解决方法(iOS&amp;Android)</p>

<p>解决思路: 取出点击位置的point, 然后translate到subview的坐标系中, 判断是否在subview的矩形中即可.</p>

<h2>iOS:</h2>

<p>现象:</p>

<p><img src="http://lvpengwei.github.io//images/20160319/7DBEE162-CB37-44E7-8560-4E50556532DA.png" width="500" alt="7DBEE162-CB37-44E7-8560-4E50556532DA.png" /></p>

<p>代码:</p>

<p><img src="http://lvpengwei.github.io//images/20160319/0FDD8A27-5C7F-48EB-A0DD-853FDA4B846C.png" width="500" alt="0FDD8A27-5C7F-48EB-A0DD-853FDA4B846C.png" /></p>

<p>结果:</p>

<p><img src="http://lvpengwei.github.io//images/20160319/78067F60-E64B-4FFB-AA67-68783D824B32.png" width="500" alt="78067F60-E64B-4FFB-AA67-68783D824B32.png" /></p>

<p>部分解释: iOS中的view有frame/bounds/center/transform等坐标属性,</p>

<h3>四者的区别(具体可查看文档, 非常详细)</h3>

<ul>
<li><code>frame</code>: 相对于parent view的坐标系</li>
<li><code>bounds</code>: 相对于自己的坐标系</li>
<li><code>center</code>: view的中心点(跟layer的anchorPoint有关, anchorPoint默认值是(0.5, 0.5), 所以是中心点)</li>
<li><code>transform</code>: 相对于center的缩放/旋转等二维操作. layer中有个transform是三维的.</li>
</ul>


<p>三者之间的关系是-bounds/center/transform会影响frame的值.</p>

<p>大部分情况, 我们使用的<code>frame</code>(x, y, width, height)只影响到了<code>bounds</code>和<code>center</code>, 此时<code>transform</code>是初始值<code>CGAffineTransformIdentity</code>; 而当我们要设置<code>transform</code>的时候, frame的值就会变得很奇怪. 其实<code>frame</code>还是那个矩形, 不过它代表的含义是能包含这个view的最小矩形而已. 因为<code>transform</code>涉及到scale/rotation等操作, 所以<code>frame</code>看起来和我们真正想要的值不太一样, 而这时候就是需要分开使用center/bounds/transform的时候, 不能单独设置frame.</p>

<p><code>layer</code>的相关属性不介绍, 有兴趣可以直接查看API文档.</p>

<h2>Android:</h2>

<p>类似的, 我开始在Android中寻找相应的解决方案. 首先需要明白的几个点</p>

<ul>
<li>Android的每一个view也有自己的坐标系, 左上角是原点(0, 0)</li>
<li>Android的view的基础坐标属性是left/top/right/bottom. width和height是由前四个值推算得来.</li>
<li>Android的view的matrix作用对应于iOS的view的transform.</li>
</ul>


<p>解决思路还是上面所述, 但是取出点击的point容易, translate到subview的坐标系中遇到了一些问题, iOS中此api存在于UIView中, 而Android的View却没有. 搜索一圈, 还是在Android的事件分发的源码中获取答案.
现象:</p>

<p><img src="http://lvpengwei.github.io//images/20160319/A5809894-B554-433E-B603-172DC01AEB93.png" width="500" alt="A5809894-B554-433E-B603-172DC01AEB93.png" /></p>

<p>代码:</p>

<p><img src="http://lvpengwei.github.io//images/20160319/B7B8A792-4D22-4EDF-B672-A96C1A5FCCA4.png" width="500" alt="B7B8A792-4D22-4EDF-B672-A96C1A5FCCA4.png" /></p>

<p>布局代码:</p>

<p><img src="http://lvpengwei.github.io//images/20160319/007A1AED-36E2-4A51-B5CA-7970D56DC40C.png" width="500" alt="007A1AED-36E2-4A51-B5CA-7970D56DC40C.png" /></p>

<p>结果:</p>

<p><img src="http://lvpengwei.github.io//images/20160319/2C8C9B9F-FD20-4986-BE8B-BAAA346943FD.png" width="500" alt="2C8C9B9F-FD20-4986-BE8B-BAAA346943FD.png" /></p>

<p>部分解释:
代码部分借鉴了Android源码.</p>

<p><img src="http://lvpengwei.github.io//images/20160319/069605CE-BF37-4BDA-B054-0514E4090EA4.png" width="500" alt="069605CE-BF37-4BDA-B054-0514E4090EA4.png" /></p>

<ol>
<li>先deep copy出一份新的event.</li>
<li>设置event的offsetLocation.</li>
<li>给event应用subview的inverse matrix.</li>
<li>还有很多类似对应的属性(后边继续学习, 本次没有用到)</li>
</ol>


<p> 然后event就被成功的转换到旋转后的view的坐标系中(斜着的), 原点是左上角.</p>

<p>遇到的问题:</p>

<ul>
<li>ev.offsetLocation: 因为我是在activity中override onTouchEvent, 所以在计算deltaX和deltaY的时候先减去了relativeLayout距离window的x和y, 再减去了demoTextView的left和top. 1.为什么不直接减去demoTextView距离window的x和y? 因为我发现, demoTextView被旋转之后, 它的left/top/right/bottom并没有改变, 从现象的截图里我们也可以看出. 而demoTextView.getLocationInWindow获取的point却是旋转之后的值, 从log中可以看出. 2.为什么不减去relativeLayout的left和top, 而是减去距离window的x和y? 因为relativeLayout只是activity的contentView, 外层还有多少ViewGroup是未知, 所以直接减去距离window的x和y.</li>
<li>ev.transform: 源码里面的写法是<code>transformedEvent.transform(child.getInverseMatrix());</code>, 而我自己去调用<code>demoTextView.getInverseMatrix()</code>的时候, 一直报错, 而且API文档中并没有这个方法, 所以就直接去Matrix的类里面去搜关键词<code>inverse</code>, 发现有这样的方法可以使用.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charles+Surge解决抓包和翻墙的冲突问题]]></title>
    <link href="http://lvpengwei.github.io//blog/2016/02/16/charles-plus-surgejie-jue-zhua-bao-he-fan-qiang-de-chong-tu-wen-ti/"/>
    <updated>2016-02-16T23:34:49+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2016/02/16/charles-plus-surgejie-jue-zhua-bao-he-fan-qiang-de-chong-tu-wen-ti</id>
    <content type="html"><![CDATA[<p>平常做iOS开发的时候经常使用<code>ShadowsocksX</code>来翻墙查资料, 使用<code>Charles</code>来抓包debug. 但是两个软件不能同时开, 一直想不到什么好的解决办法.</p>

<p><code>Surge</code>特点是: 支持翻墙, 但是抓包的request和response不够详细.
Mac版的Surge还要自己配置<code>Web Proxy(HTTP)</code>和<code>Secure Web Proxy(HTTPS)</code>.</p>

<p>然后我就查了一下<code>Charles</code>的菜单, 发现了<code>External Proxy Setting</code>, 然后发现刚好支持<code>Web Proxy(HTTP)</code>和<code>Secure Web Proxy(HTTPS)</code>, 配好调试, 果然成功. 然后手机上再设置成<code>Charles</code>的<code>Web Proxy(HTTP)</code>, 也是可以抓包和翻墙的.</p>

<p><code>Charles</code>特点是: 抓包的request和response很详细, 但是<code>External Proxy Setting</code>支持的protocol比较少.</p>

<p><code>Charles</code>和<code>Surge</code>结合起来就很完美的解决了我这个问题.</p>

<p>再简化一步, 就直接用手机上的<code>Surge</code>生成一个<code>Web Proxy(HTTP)</code>的config, 这样就不用每次去系统设置里手动设置了(每次敲好麻烦), 这样每次进入公司, 电脑上开着<code>Charles</code>和Mac版的<code>Surge</code>, 手机上起着<code>Surge</code>, 两个设备都可以被抓包和翻墙, 妈妈再也不用担心我在<code>ShadowsocksX</code>和<code>Charles</code>这两个软件之间来回切换了.</p>

<p>附几张比较重要的图:
<code>Charles</code>的<code>External Proxy Setting</code>
<img src="http://lvpengwei.github.io//images/20160216/51F279D2-6924-4BB8-A230-48C693F2CE96.png" alt="51F279D2-6924-4BB8-A230-48C693F2CE96.png" /></p>

<p>手机上的Surge的<code>Web Proxy(HTTP)</code>的config
<img src="http://lvpengwei.github.io//images/20160216/IMG_1261.png" width="500" alt="IMG_1261.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charles Map Local功能实现接口本地调试]]></title>
    <link href="http://lvpengwei.github.io//blog/2016/01/17/charles-map-localgong-neng-shi-xian-jie-kou-ben-di-diao-shi/"/>
    <updated>2016-01-17T14:31:17+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2016/01/17/charles-map-localgong-neng-shi-xian-jie-kou-ben-di-diao-shi</id>
    <content type="html"><![CDATA[<p>找到指定接口
<img src="http://lvpengwei.github.io//images/20160117/8FC03A50-82B0-4EF5-A8B0-2B9A4677B151.jpeg" alt="8FC03A50-82B0-4EF5-A8B0-2B9A4677B151.jpeg" /></p>

<p>右击链接, 出现菜单, 选择Map Local&hellip;; 修改query和Local Path
<img src="http://lvpengwei.github.io//images/20160117/FD22D43A-AF1D-4C2C-994B-9385FC011E46.jpeg" alt="FD22D43A-AF1D-4C2C-994B-9385FC011E46.jpeg" /></p>

<p>选择顶部菜单Tools->Rewrite&hellip;, 并添加新的Rule
<img src="http://lvpengwei.github.io//images/20160117/078F326F-E5FD-4FF4-8ECF-2433B325C052.jpeg" alt="078F326F-E5FD-4FF4-8ECF-2433B325C052.jpeg" /></p>

<p>编辑新的Rule
<img src="http://lvpengwei.github.io//images/20160117/6760FEA7-12FE-4F0A-B3C4-562C290738C5.jpeg" alt="6760FEA7-12FE-4F0A-B3C4-562C290738C5.jpeg" /></p>

<p>结果
<img src="http://lvpengwei.github.io//images/20160117/B38D253F-CB3B-4719-BAEC-0CC626FC6290.jpeg" alt="B38D253F-CB3B-4719-BAEC-0CC626FC6290.jpeg" /></p>

<p><img src="http://lvpengwei.github.io//images/20160117/E397F8AC-D864-40DF-ACA5-60753D5D60FD.jpeg" alt="E397F8AC-D864-40DF-ACA5-60753D5D60FD.jpeg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[穿衣助手iOS团队开发流程转变]]></title>
    <link href="http://lvpengwei.github.io//blog/2015/12/29/chuan-yi-zhu-shou-iostuan-dui-kai-fa-liu-cheng-zhuan-bian/"/>
    <updated>2015-12-29T22:18:57+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2015/12/29/chuan-yi-zhu-shou-iostuan-dui-kai-fa-liu-cheng-zhuan-bian</id>
    <content type="html"><![CDATA[<h2>原来的开发模式</h2>

<p>团队使用敏捷开发模式</p>

<p>Git Workflow: 使用<a href="https://www.atlassian.com/git/tutorials/comparing-workflows/centralized-workflow">Centralized Workflow</a>.</p>

<p>测试: Push Event Hook编译最新版本.</p>

<p>安装: 使用itms-services链接安装APP, 一个静态的html, <a href="https://ios.ichuanyi.me/">iOS测试版本原来的页面</a></p>

<!--more-->


<h3>出现的问题</h3>

<ul>
<li>站会人多, 很多与自己不相关的东西, 浪费时间</li>
<li>发版本时间变长(2星期 -> 一个月)</li>
</ul>


<h2>调整</h2>

<p>整个开发团队是敏捷开发模式, 但是随着业务增加, 需要多条业务线来保证开发任务可控.
 每条业务线一个小团队(产品/开发/QA), 每个小团队也是采用敏捷开发模式.</p>

<h2>开发</h2>

<ul>
<li>整体采用<a href="https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow">Feature Branch Workflow</a>, 一条develop, 多条feature.</li>
<li>每个feature一个小团队(产品/开发/QA)</li>
<li>每个feature branch采用<a href="https://www.atlassian.com/git/tutorials/comparing-workflows/centralized-workflow">Centralized Workflow</a>.</li>
<li>使用gitlab来做code review.</li>
</ul>


<h2>持续集成</h2>

<ul>
<li>QA使用Jenkins编译自己需要的feature branch</li>
<li>Jenkins编译完成之后将IPA上传到HTTPS服务器, 根据IPA名字生成一个html, 使用itms-services链接安装APP</li>
</ul>


<h2>穿衣助手实现方式</h2>

<p><a href="https://github.com/lvpengwei/iOS-download-manifest">根据IPA名字生成不同的items-services链接</a></p>

<p><a href="https://ios.ichuanyi.me/feature/iPhone/html/index.html">穿衣助手测试版本安装(feature branch版)</a></p>

<h2>参考</h2>

<p><a href="https://git-scm.com/doc">Git - Documentation</a></p>

<p><a href="https://www.atlassian.com/git/tutorials/comparing-workflows/">Git Workflows and Tutorials</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS应用中如何获取启动图]]></title>
    <link href="http://lvpengwei.github.io//blog/2015/12/23/iosying-yong-zhong-ru-he-huo-qu-qi-dong-tu/"/>
    <updated>2015-12-23T10:32:14+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2015/12/23/iosying-yong-zhong-ru-he-huo-qu-qi-dong-tu</id>
    <content type="html"><![CDATA[<p>可以在文档中搜索<code>UILaunchImages</code>和<code>UILaunchImageFile</code>这两个关键字。</p>

<!--more-->


<p>前提:使用.xcassets配置LaunchImage。
1.设备系统为iOS7以上，可以通过遍历由<code>UILaunchImages</code>取出来的dict，根据当前尺寸、系统和方向获取名字。key为<code>UILaunchImageName</code>, <code>UILaunchImageMinimumOSVersion</code>, <code>UILaunchImageSize</code>, <code>UILaunchImageOrientation</code>。
<img src="http://blog.yourdream.cc/usr/uploads/2015/04/2453186553.png" alt="E5589B97-D7D4-4B6B-B648-0F9D15FEBFA2.png" />
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/453113142.png" alt="5B51C674-18CC-408C-A394-53ED00E5849F.png" />
2.设备系统为iOS6及以下，可以通过<code>UILaunchImageFile</code>取出启动图名字，在配上一些参数获取。
* iPhone5拼上<code>-568h</code>
* iPad拼上<code>Portrait</code>或者<code>Landscape</code>
* 其他直接用启动图名字
<img src="http://blog.yourdream.cc/usr/uploads/2015/04/2656813522.png" alt="C8D35976-AE29-4601-A4BB-45E24826BDCB.png" />
最后，分析一下.xcassets的配置和打进bundle中素材的对应关系
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/3287509698.png" alt="D8BBA614-CC66-4DE1-A01D-DEE798E2A549.png" />
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/3750565276.png" alt="053E1411-BC46-404B-8153-564749A1EBEC.png" /></p>

<p>iOS8 and Later中的素材分别对应的是iPhone6和6p的尺寸，所以名字是<code>LaunchImage-800-667h@2x.png</code>和<code>LaunchImage-800-Portrait-736h@3x.png</code>(因为6p可以横向，所以带有<code>Portrait</code>，不过事例中没有勾选设置)</p>

<p>iOS7 and Later中<code>iPhone</code>的<code>Portrait</code>生成的素材是<code>LaunchImage-700@2x.png</code>和<code>LaunchImage-700-568h@2x.png</code>
<code>iPad</code>的<code>Portrait</code>生成的素材是<code>LaunchImage-700-Portrait@2x~ipad.png</code>和<code>LaunchImage-700-Portrait~ipad.png</code></p>

<p>iOS6.0 and Later中<code>iPhone</code>的<code>Portrait</code>生成的素材是<code>LaunchImage-568h@2x.png</code>, <code>LaunchImage@2x.png</code>和<code>LaunchImage.png</code>
<code>iPad</code>的<code>Portrait</code>生成的素材是<code>LaunchImage-Portrait@2x~ipad.png</code>和<code>LaunchImage-Portrait~ipad.png</code></p>

<p><a href="https://github.com/lvpengwei/LVLaunchImage">项目地址</a></p>

<p><a href="http://blog.yourdream.cc/2015/03/28/119.html">本篇博客另外地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS错误日志分析]]></title>
    <link href="http://lvpengwei.github.io//blog/2015/12/23/ioscuo-wu-ri-zhi-fen-xi/"/>
    <updated>2015-12-23T10:20:55+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2015/12/23/ioscuo-wu-ri-zhi-fen-xi</id>
    <content type="html"><![CDATA[<p>穿衣助手iOS使用umeng来做错误日志统计，下面介绍一下如何通过lldb和错误日志定位崩溃位置。</p>

<!--more-->


<p>1.首先，启一个终端，输入<code>lldb</code>，回车。进入lldb模式。如图
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/1979910195.png" alt="F91A0BB9-84B4-4BAE-8F11-FF937DEF0CC0.png" /></p>

<p>2.输入<code>target create --no-dependents --arch armv7 'path'</code>，此处path是指可执行文件CYZS的位置，路径大概是<code>~/CYZS\ 1-27-15,\ 9.49\ AM.xcarchive/dSYMs/CYZS.app.dSYM/Contents/Resources/DWARF/CYZS</code>,armv7根据错误日志所记录进行改变，执行即可，如图
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/2077915295.png" alt="DC2A5FFA-6CE8-4EC2-B189-BB26BADE3A2B.png" /></p>

<p>3.使用<code>image lookup --address '地址'</code>进行定位。umeng日志如图:
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/4132646907.png" alt="1E31F2DA-9035-4C3C-BCF0-CC0DF28C4502.png" /></p>

<p>然后复制那些前面标有我们APP名称的地址
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/1195208596.png" alt="407AAE6A-E111-4171-92A8-32BF1F461881.png" /></p>

<p>Update : 2015-04-23
umeng中64位crash的log中发现slide address跟以前的不一样，所以不能正确的定位crash的地址。
解决方法是在第二步之后输入<code>image list</code>看是否有与umeng中一致的地址，若没有则输入<code>target modules load --file 'path' __TEXT 0x429496729616</code>重设即可。</p>

<p><img src="http://blog.yourdream.cc/usr/uploads/2015/04/612599683.png" alt="asdfasdfa.png" /></p>

<p><a href="http://blog.yourdream.cc/2015/03/06/107.html">本篇博客另外地址</a></p>

<p>参照
<a href="http://lldb.llvm.org/symbolication.html">The LLDB Debugger</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Git]]></title>
    <link href="http://lvpengwei.github.io//blog/2014/03/10/learn-git/"/>
    <updated>2014-03-10T17:55:47+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2014/03/10/learn-git</id>
    <content type="html"><![CDATA[<h1>学习git之后的总结(心得)</h1>

<p>之前骊住项目管理是用svn，后来服务器中项目丢失，导致svn无法再进行管理项目，又通过github发现git的强大。于是用了2天时间自学git基础，之后断断续续用了一周时间去实践搭建git服务器。</p>

<hr />

<h2>git心得(注意事项)</h2>

<p>1.添加删除文件：一个团队中，若某个队员要添加或删除一些文件，操作如下</p>

<blockquote><p><strong>NOTE:</strong></p>

<ul>
<li>在添加之前，在分支中commit所做的修改，然后切换到master中pull下最新的项目(project.pbxproj有改变的话会导致冲突，可把本地项目中的这个文件先拉到桌面，然后再poll)</li>
<li>开始添加或删除文件</li>
<li>push到服务器(包括工程文件project.pbxproj和添加或删除的文件)<br/>
然后其他队员也要进行添加或删除操作时，进行同样的步骤</li>
</ul>
</blockquote>

<p>2.尽量多建分支(branch)<br/>
3.把一次功能修改的文件分多次提交(主要是为了更加详细，清楚都进行了哪些操作)  这个是在代码中注释的另一种体现</p>

<p>2014-05-15 更新</p>

<p>xcode工程文件冲突解决办法之一：对项目中的文件进行排序。</p>

<p>1.添加排序脚本sort-Xcode-project-file(排序命令：perl -w sort-Xcode-project-file)</p>

<p>2.添加脚本到build phases(可选)</p>

<h2>后记</h2>

<p>git 标准<a href="http://www.gitignore.io/api/xcode,objective-c">gitignore</a>文件(for iOS project)
git 常见冲突 <a href="http://www.shanhh.com/blog/2013/01/30/git_FAQ/">解决方案</a><br/>
git 参考教程 :<br/>
<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000">Git教程 - 廖雪峰的官方网站</a><br/>
<a href="http://git-scm.com/book/zh/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E6%9E%B6%E8%AE%BE%E6%9C%8D%E5%8A%A1%E5%99%A8">Git - 架设服务器</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的第一篇博客]]></title>
    <link href="http://lvpengwei.github.io//blog/2014/03/02/my-first-blog/"/>
    <updated>2014-03-02T15:24:36+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2014/03/02/my-first-blog</id>
    <content type="html"><![CDATA[<p><strong>首先介绍一下blog搭建历程。</strong></p>

<p>博客管理工具：<a href="octopress.org">octopress</a></p>

<p>当然第一步你得先安装并了解Git. (<a href="http://git-scm.com/">Install Git</a>)</p>

<p>首先要安装<strong>ruby</strong>，当初我是通过rvm来安装，后来出现了一堆麻烦，所以就放弃了这条路，改为HomeBrew->rbenv->ruby。基本不需要配置环境。</p>

<p>1.<a href="http://brew.sh/index_zh-cn.html">安装Homebrew</a>
2.<a href="http://octopress.org/docs/setup/rbenv/">安装rbenv</a>：Alternate Installation Using Homebrew<br/>
3.<a href="http://octopress.org/docs/setup/rbenv/">安装Ruby</a>：Install Ruby 1.9.3</p>

<pre><code>ruby --version //查看ruby版本
</code></pre>

<p><strong>安装Octopress</strong></p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress  
</code></pre>

<p>然后安装依赖</p>

<pre><code>gem install bundler
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
</code></pre>

<p>最后安装Octopress</p>

<pre><code>rake install
</code></pre>

<p>简单配置：主要修改_config.yml，这个配置文件都有相应的注释。主要就是改一些博客头，作者名之类的东西。 注意最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。(from <a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">唐巧</a>)</p>

<p><strong>写博客方法</strong></p>

<ul>
<li>rake new_post[‘article name’] 生成博文框架，然后修改生成的文件即可</li>
<li>rake generate 生成静态文件</li>
<li>rake preview 在本机4000端口生成访问内容</li>
<li>rake deploy 发布文件</li>
</ul>


<p>博客内容是采用markdown语法，所以需要熟悉一下常用的标签。我用的是Google Chrome的插件&ndash;Minimalist Markdown Editor</p>

<p><strong>高级配置还没有测试，下次更新！</strong></p>

<p><strong>参考</strong></p>

<ul>
<li><a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></li>
<li><a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">破船之家</a></li>
<li><a href="http://shanewfx.github.io/blog/2012/02/16/bulid-blog-by-octopress/">思考的轨迹</a></li>
<li><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">唐巧的技术博客</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
