<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lvpengwei’s Blog]]></title>
  <link href="http://lvpengwei.github.io//atom.xml" rel="self"/>
  <link href="http://lvpengwei.github.io//"/>
  <updated>2015-12-29T22:21:40+08:00</updated>
  <id>http://lvpengwei.github.io//</id>
  <author>
    <name><![CDATA[lvpengwei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[穿衣助手iOS团队开发流程转变]]></title>
    <link href="http://lvpengwei.github.io//blog/2015/12/29/chuan-yi-zhu-shou-iostuan-dui-kai-fa-liu-cheng-zhuan-bian/"/>
    <updated>2015-12-29T22:18:57+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2015/12/29/chuan-yi-zhu-shou-iostuan-dui-kai-fa-liu-cheng-zhuan-bian</id>
    <content type="html"><![CDATA[<h2>原来的开发模式</h2>

<p>团队使用敏捷开发模式</p>

<p>Git Workflow: 使用<a href="https://www.atlassian.com/git/tutorials/comparing-workflows/centralized-workflow">Centralized Workflow</a>.</p>

<p>测试: Push Event Hook编译最新版本.</p>

<p>安装: 使用itms-services链接安装APP, 一个静态的html, <a href="https://ios.ichuanyi.me/">iOS测试版本原来的页面</a></p>

<!--more-->


<h3>出现的问题</h3>

<ul>
<li>站会人多, 很多与自己不相关的东西, 浪费时间</li>
<li>发版本时间变长(2星期 -> 一个月)</li>
</ul>


<h2>调整</h2>

<p>整个开发团队是敏捷开发模式, 但是随着业务增加, 需要多条业务线来保证开发任务可控.
 每条业务线一个小团队(产品/开发/QA), 每个小团队也是采用敏捷开发模式.</p>

<h2>开发</h2>

<ul>
<li>整体采用<a href="https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow">Feature Branch Workflow</a>, 一条develop, 多条feature.</li>
<li>每个feature一个小团队(产品/开发/QA)</li>
<li>每个feature branch采用<a href="https://www.atlassian.com/git/tutorials/comparing-workflows/centralized-workflow">Centralized Workflow</a>.</li>
</ul>


<h2>持续集成</h2>

<ul>
<li>QA使用Jenkins编译自己需要的feature branch</li>
<li>Jenkins编译完成之后将IPA上传到HTTPS服务器, 根据IPA名字生成一个html, 使用itms-services链接安装APP</li>
</ul>


<h2>穿衣助手实现方式</h2>

<p><a href="https://github.com/lvpengwei/iOS-download-manifest">根据IPA名字生成不同的items-services链接</a></p>

<p><a href="https://ios.ichuanyi.me/feature/iPhone/html/index.html">穿衣助手测试版本安装(feature branch版)</a></p>

<h2>参考</h2>

<p><a href="https://git-scm.com/doc">Git - Documentation</a></p>

<p><a href="https://www.atlassian.com/git/tutorials/comparing-workflows/">Git Workflows and Tutorials</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS应用中如何获取启动图]]></title>
    <link href="http://lvpengwei.github.io//blog/2015/12/23/iosying-yong-zhong-ru-he-huo-qu-qi-dong-tu/"/>
    <updated>2015-12-23T10:32:14+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2015/12/23/iosying-yong-zhong-ru-he-huo-qu-qi-dong-tu</id>
    <content type="html"><![CDATA[<p>可以在文档中搜索<code>UILaunchImages</code>和<code>UILaunchImageFile</code>这两个关键字。</p>

<!--more-->


<p>前提:使用.xcassets配置LaunchImage。
1.设备系统为iOS7以上，可以通过遍历由<code>UILaunchImages</code>取出来的dict，根据当前尺寸、系统和方向获取名字。key为<code>UILaunchImageName</code>, <code>UILaunchImageMinimumOSVersion</code>, <code>UILaunchImageSize</code>, <code>UILaunchImageOrientation</code>。
<img src="http://blog.yourdream.cc/usr/uploads/2015/04/2453186553.png" alt="E5589B97-D7D4-4B6B-B648-0F9D15FEBFA2.png" />
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/453113142.png" alt="5B51C674-18CC-408C-A394-53ED00E5849F.png" />
2.设备系统为iOS6及以下，可以通过<code>UILaunchImageFile</code>取出启动图名字，在配上一些参数获取。
* iPhone5拼上<code>-568h</code>
* iPad拼上<code>Portrait</code>或者<code>Landscape</code>
* 其他直接用启动图名字
<img src="http://blog.yourdream.cc/usr/uploads/2015/04/2656813522.png" alt="C8D35976-AE29-4601-A4BB-45E24826BDCB.png" />
最后，分析一下.xcassets的配置和打进bundle中素材的对应关系
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/3287509698.png" alt="D8BBA614-CC66-4DE1-A01D-DEE798E2A549.png" />
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/3750565276.png" alt="053E1411-BC46-404B-8153-564749A1EBEC.png" /></p>

<p>iOS8 and Later中的素材分别对应的是iPhone6和6p的尺寸，所以名字是<code>LaunchImage-800-667h@2x.png</code>和<code>LaunchImage-800-Portrait-736h@3x.png</code>(因为6p可以横向，所以带有<code>Portrait</code>，不过事例中没有勾选设置)</p>

<p>iOS7 and Later中<code>iPhone</code>的<code>Portrait</code>生成的素材是<code>LaunchImage-700@2x.png</code>和<code>LaunchImage-700-568h@2x.png</code>
<code>iPad</code>的<code>Portrait</code>生成的素材是<code>LaunchImage-700-Portrait@2x~ipad.png</code>和<code>LaunchImage-700-Portrait~ipad.png</code></p>

<p>iOS6.0 and Later中<code>iPhone</code>的<code>Portrait</code>生成的素材是<code>LaunchImage-568h@2x.png</code>, <code>LaunchImage@2x.png</code>和<code>LaunchImage.png</code>
<code>iPad</code>的<code>Portrait</code>生成的素材是<code>LaunchImage-Portrait@2x~ipad.png</code>和<code>LaunchImage-Portrait~ipad.png</code></p>

<p><a href="https://github.com/lvpengwei/LVLaunchImage">项目地址</a></p>

<p><a href="http://blog.yourdream.cc/2015/03/28/119.html">本篇博客另外地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS错误日志分析]]></title>
    <link href="http://lvpengwei.github.io//blog/2015/12/23/ioscuo-wu-ri-zhi-fen-xi/"/>
    <updated>2015-12-23T10:20:55+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2015/12/23/ioscuo-wu-ri-zhi-fen-xi</id>
    <content type="html"><![CDATA[<p>穿衣助手iOS使用umeng来做错误日志统计，下面介绍一下如何通过lldb和错误日志定位崩溃位置。</p>

<!--more-->


<p>1.首先，启一个终端，输入<code>lldb</code>，回车。进入lldb模式。如图
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/1979910195.png" alt="F91A0BB9-84B4-4BAE-8F11-FF937DEF0CC0.png" /></p>

<p>2.输入<code>target create --no-dependents --arch armv7 'path'</code>，此处path是指可执行文件CYZS的位置，路径大概是<code>~/CYZS\ 1-27-15,\ 9.49\ AM.xcarchive/dSYMs/CYZS.app.dSYM/Contents/Resources/DWARF/CYZS</code>,armv7根据错误日志所记录进行改变，执行即可，如图
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/2077915295.png" alt="DC2A5FFA-6CE8-4EC2-B189-BB26BADE3A2B.png" /></p>

<p>3.使用<code>image lookup --address '地址'</code>进行定位。umeng日志如图:
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/4132646907.png" alt="1E31F2DA-9035-4C3C-BCF0-CC0DF28C4502.png" /></p>

<p>然后复制那些前面标有我们APP名称的地址
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/1195208596.png" alt="407AAE6A-E111-4171-92A8-32BF1F461881.png" /></p>

<p>Update : 2015-04-23
umeng中64位crash的log中发现slide address跟以前的不一样，所以不能正确的定位crash的地址。
解决方法是在第二步之后输入<code>image list</code>看是否有与umeng中一致的地址，若没有则输入<code>target modules load --file 'path' __TEXT 0x429496729616</code>重设即可。</p>

<p><img src="http://blog.yourdream.cc/usr/uploads/2015/04/612599683.png" alt="asdfasdfa.png" /></p>

<p><a href="http://blog.yourdream.cc/2015/03/06/107.html">本篇博客另外地址</a></p>

<p>参照
<a href="http://lldb.llvm.org/symbolication.html">The LLDB Debugger</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Git]]></title>
    <link href="http://lvpengwei.github.io//blog/2014/03/10/learn-git/"/>
    <updated>2014-03-10T17:55:47+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2014/03/10/learn-git</id>
    <content type="html"><![CDATA[<h1>学习git之后的总结(心得)</h1>

<p>之前骊住项目管理是用svn，后来服务器中项目丢失，导致svn无法再进行管理项目，又通过github发现git的强大。于是用了2天时间自学git基础，之后断断续续用了一周时间去实践搭建git服务器。</p>

<hr />

<h2>git心得(注意事项)</h2>

<p>1.添加删除文件：一个团队中，若某个队员要添加或删除一些文件，操作如下</p>

<blockquote><p><strong>NOTE:</strong></p>

<ul>
<li>在添加之前，在分支中commit所做的修改，然后切换到master中pull下最新的项目(project.pbxproj有改变的话会导致冲突，可把本地项目中的这个文件先拉到桌面，然后再poll)</li>
<li>开始添加或删除文件</li>
<li>push到服务器(包括工程文件project.pbxproj和添加或删除的文件)<br/>
然后其他队员也要进行添加或删除操作时，进行同样的步骤</li>
</ul>
</blockquote>

<p>2.尽量多建分支(branch)<br/>
3.把一次功能修改的文件分多次提交(主要是为了更加详细，清楚都进行了哪些操作)  这个是在代码中注释的另一种体现</p>

<p>2014-05-15 更新</p>

<p>xcode工程文件冲突解决办法之一：对项目中的文件进行排序。</p>

<p>1.添加排序脚本sort-Xcode-project-file(排序命令：perl -w sort-Xcode-project-file)</p>

<p>2.添加脚本到build phases(可选)</p>

<h2>后记</h2>

<p>git 标准<a href="http://www.gitignore.io/api/xcode,objective-c">gitignore</a>文件(for iOS project)
git 常见冲突 <a href="http://www.shanhh.com/blog/2013/01/30/git_FAQ/">解决方案</a><br/>
git 参考教程 :<br/>
<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000">Git教程 - 廖雪峰的官方网站</a><br/>
<a href="http://git-scm.com/book/zh/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E6%9E%B6%E8%AE%BE%E6%9C%8D%E5%8A%A1%E5%99%A8">Git - 架设服务器</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的第一篇博客]]></title>
    <link href="http://lvpengwei.github.io//blog/2014/03/02/my-first-blog/"/>
    <updated>2014-03-02T15:24:36+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2014/03/02/my-first-blog</id>
    <content type="html"><![CDATA[<p><strong>首先介绍一下blog搭建历程。</strong></p>

<p>博客管理工具：<a href="octopress.org">octopress</a></p>

<p>当然第一步你得先安装并了解Git. (<a href="http://git-scm.com/">Install Git</a>)</p>

<p>首先要安装<strong>ruby</strong>，当初我是通过rvm来安装，后来出现了一堆麻烦，所以就放弃了这条路，改为HomeBrew->rbenv->ruby。基本不需要配置环境。</p>

<p>1.<a href="http://brew.sh/index_zh-cn.html">安装Homebrew</a>
2.<a href="http://octopress.org/docs/setup/rbenv/">安装rbenv</a>：Alternate Installation Using Homebrew<br/>
3.<a href="http://octopress.org/docs/setup/rbenv/">安装Ruby</a>：Install Ruby 1.9.3</p>

<pre><code>ruby --version //查看ruby版本
</code></pre>

<p><strong>安装Octopress</strong></p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress  
</code></pre>

<p>然后安装依赖</p>

<pre><code>gem install bundler
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
</code></pre>

<p>最后安装Octopress</p>

<pre><code>rake install
</code></pre>

<p>简单配置：主要修改_config.yml，这个配置文件都有相应的注释。主要就是改一些博客头，作者名之类的东西。 注意最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。(from <a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">唐巧</a>)</p>

<p><strong>写博客方法</strong></p>

<ul>
<li>rake new_post[‘article name’] 生成博文框架，然后修改生成的文件即可</li>
<li>rake generate 生成静态文件</li>
<li>rake preview 在本机4000端口生成访问内容</li>
<li>rake deploy 发布文件</li>
</ul>


<p>博客内容是采用markdown语法，所以需要熟悉一下常用的标签。我用的是Google Chrome的插件&ndash;Minimalist Markdown Editor</p>

<p><strong>高级配置还没有测试，下次更新！</strong></p>

<p><strong>参考</strong></p>

<ul>
<li><a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></li>
<li><a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">破船之家</a></li>
<li><a href="http://shanewfx.github.io/blog/2012/02/16/bulid-blog-by-octopress/">思考的轨迹</a></li>
<li><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">唐巧的技术博客</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
