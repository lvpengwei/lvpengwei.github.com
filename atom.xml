<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lvpengwei’s Blog]]></title>
  <link href="http://lvpengwei.github.io//atom.xml" rel="self"/>
  <link href="http://lvpengwei.github.io//"/>
  <updated>2016-09-22T22:59:03+08:00</updated>
  <id>http://lvpengwei.github.io//</id>
  <author>
    <name><![CDATA[lvpengwei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS APP的简单Web Interface应用]]></title>
    <link href="http://lvpengwei.github.io//blog/2016/06/13/ios-appde-jian-dan-web-interfaceying-yong/"/>
    <updated>2016-06-13T17:28:28+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2016/06/13/ios-appde-jian-dan-web-interfaceying-yong</id>
    <content type="html"><![CDATA[<pre><code>  最近接了一个内部工具开发的需求：运营人员需要生成商品尺码图片，之前他们是用PS做的，现在想让我们做个程序工具化这个过程。
</code></pre>

<p>刚拿到这个需求，分析之后，想了两个方案：</p>

<ol>
<li>APP生成图片，导出到电脑</li>
<li>h5生成图片save到电脑</li>
<li>脚本生成，因为UI比较复杂，需要获取数据，所以排除</li>
</ol>


<p>由于对APP开发比较熟悉，所以尝试着用客户端去做，生成图片不难，关键是如何导出到电脑上，当时的思路是</p>

<ol>
<li>iOS的话保存到相册用AirDrop去传</li>
<li>Android保存到SD卡上，用PC上的软件导出</li>
<li>打成zip包，客户端起一个server，把zip download下来</li>
</ol>


<p>本着操作简洁的原则，开始探索第三种方案。</p>

<p>一个程序，对用户来说只要有输入和输出就行了，中间不需要什么过多的介入，这才是优化流程的意义所在。</p>

<p>在这个例子中，输入是商品id数组，输出是一个zip包。</p>

<p>设计流程是：接收一个商品id数组，开始进行处理，最终输出一张图片save到Documents的一个文件夹下，然后进行zip打包，最后进行下载。</p>

<p>遇到的问题：</p>

<p>1.iOS的<code>AutoLayout</code>，图片的模板是用<code>AutoLayout</code>实现，变高(基于<code>AutoLayout</code>中<code>view</code>的<code>ContentSize</code>概念)。问题就是截图的时候会报警告，然后出的图是空的，debug之后，发现是view赋值之后没有进行layout，所以size是<code>CGSizeZero</code>的，截图时得到的context是0x0，之前在项目中，没有出现此问题，是因为view一般都会有superview，而superview在layout的时候subview也会layout。这里的view没有superview，所以没人触发它的layout过程，加了两行代码，完成。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[self setNeedsUpdateConstraints];
</span><span class='line'>[self layoutIfNeeded];</span></code></pre></td></tr></table></div></figure>


<p>2.在提交商品id数组之后，如果处理过程是异步的，那么如何通知用户是个问题，本来打算是手机local notification通知，但是我们这个APP直接部署在局域网的Mac Pro的模拟器里面，不需要用户安装，而web页面做push操作比较麻烦，所以采用同步处理，也就是说，提交过商品id数组之后页面一直loading，直到处理完毕，给出下一个页面。在APP端，商品信息的加载和商品主图的加载也是异步的，那么怎么才能在一个请求中做同步呢，也就是收到web请求的时候，提交到一个manager中去处理这部分商品，但是这里sleep掉，等那边处理完毕之后，再唤醒接着返回response，于是就想到了iOS的<code>Runloop</code>这个机制。代码如下：</p>

<p><code>MyHTTPConnection.m</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSPort *port = [NSMachPort port];
</span><span class='line'>[[NSRunLoop currentRunLoop] addPort:port forMode:NSDefaultRunLoopMode];
</span><span class='line'>[ExportImageManager sharedInstance].thread = [NSThread currentThread];
</span><span class='line'>[[ExportImageManager sharedInstance] createImageWithGoodsIds:goodsIdArr];
</span><span class='line'>while (![ExportImageManager sharedInstance].completed) {
</span><span class='line'>    NSLog(@"runloop start......");
</span><span class='line'>    [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];
</span><span class='line'>    NSLog(@"runloop end......");
</span><span class='line'>}
</span><span class='line'>[[NSRunLoop currentRunLoop] removePort:port forMode:NSDefaultRunLoopMode];
</span><span class='line'>CFRunLoopStop(CFRunLoopGetCurrent());
</span><span class='line'>[ExportImageManager sharedInstance].thread = nil;</span></code></pre></td></tr></table></div></figure>


<p>注解：
这块代码执行的环境是在HTTPServer的队列里面，所以在哪个线程中是未知的，线程中的runloop默认是不开启的，所以在这里，做了几件事</p>

<ol>
<li>声明一个port放在runloop中，防止runloop中没有任何输入源会直接退出</li>
<li>把当前所在的thread赋给manager，当处理完成的时候，在这个thread上performSelector，唤醒runloop</li>
<li>在while循环中启动runloop</li>
<li>把之前的port remove掉</li>
<li>把runloop停掉</li>
<li>之前引用的thread清空</li>
</ol>


<p>最终实现，3个操作步骤</p>

<ol>
<li><code>localhost:8081/create?id,id,id,id</code> 图片生成请求，response返回的时候处理结束，会在<code>Documents/export/</code>的文件夹下生成以商品id命名的图片</li>
<li><code>localhost:8081/zip</code> 将<code>Documents/export</code>打包成<code>Documents/export.zip</code> 并删除<code>Documents/export</code></li>
<li><code>localhost:8081/export.zip</code> 下载zip</li>
</ol>


<p>其实可以把打包操作合并在第一步中。缩减为两步</p>

<p><strong>思路来源是，QQ阅读传pdf的时候是在电脑上打开一个网页，然后把文件拖进去就可以同步到手机。实现之后发现，这个功能和<code>Charles</code>的<code>Web Interface</code>功能一样。。</strong></p>

<p>项目地址：<a href="https://github.com/lvpengwei/ExportGoodsImage">https://github.com/lvpengwei/ExportGoodsImage</a></p>

<p><img src="http://blog.yourdream.cc/usr/uploads/2016/06/3834834005.png" alt="Simulator Screen Shot Jun 13, 2016, 17.00.33.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android坐标系学习案例(与iOS进行对比)]]></title>
    <link href="http://lvpengwei.github.io//blog/2016/03/19/androidzuo-biao-xi-xue-xi-an-li-yu-iosjin-xing-dui-bi/"/>
    <updated>2016-03-19T01:27:38+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2016/03/19/androidzuo-biao-xi-xue-xi-an-li-yu-iosjin-xing-dui-bi</id>
    <content type="html"><![CDATA[<p>问题: 判断parent view中的手势是否出现在旋转之后的subview的范围中的解决方法(iOS&amp;Android)</p>

<p>解决思路: 取出点击位置的point, 然后translate到subview的坐标系中, 判断是否在subview的矩形中即可.</p>

<h2>iOS:</h2>

<p>现象:
<img src="http://blog.yourdream.cc/usr/uploads/2016/03/2100571732.png" alt="7DBEE162-CB37-44E7-8560-4E50556532DA.png" /></p>

<p>代码:
<img src="http://blog.yourdream.cc/usr/uploads/2016/03/2933493193.png" alt="0FDD8A27-5C7F-48EB-A0DD-853FDA4B846C.png" /></p>

<p>结果:
<img src="http://blog.yourdream.cc/usr/uploads/2016/03/1751422177.png" alt="78067F60-E64B-4FFB-AA67-68783D824B32.png" /></p>

<p>部分解释: iOS中的view有frame/bounds/center/transform等坐标属性,</p>

<h3>四者的区别(具体可查看文档, 非常详细)</h3>

<ul>
<li><code>frame</code>: 相对于parent view的坐标系</li>
<li><code>bounds</code>: 相对于自己的坐标系</li>
<li><code>center</code>: view的中心点(跟layer的anchorPoint有关, anchorPoint默认值是(0.5, 0.5), 所以是中心点)</li>
<li><code>transform</code>: 相对于center的缩放/旋转等二维操作. layer中有个transform是三维的.</li>
</ul>


<p>三者之间的关系是-bounds/center/transform会影响frame的值.</p>

<p>大部分情况, 我们使用的<code>frame</code>(x, y, width, height)只影响到了<code>bounds</code>和<code>center</code>, 此时<code>transform</code>是初始值<code>CGAffineTransformIdentity</code>; 而当我们要设置<code>transform</code>的时候, frame的值就会变得很奇怪. 其实<code>frame</code>还是那个矩形, 不过它代表的含义是能包含这个view的最小矩形而已. 因为<code>transform</code>涉及到scale/rotation等操作, 所以<code>frame</code>看起来和我们真正想要的值不太一样, 而这时候就是需要分开使用center/bounds/transform的时候, 不能单独设置frame.</p>

<p><code>layer</code>的相关属性不介绍, 有兴趣可以直接查看API文档.</p>

<h2>Android:</h2>

<p>类似的, 我开始在Android中寻找相应的解决方案. 首先需要明白的几个点</p>

<ul>
<li>Android的每一个view也有自己的坐标系, 左上角是原点(0, 0)</li>
<li>Android的view的基础坐标属性是left/top/right/bottom. width和height是由前四个值推算得来.</li>
<li>Android的view的matrix作用对应于iOS的view的transform.</li>
</ul>


<p>解决思路还是上面所述, 但是取出点击的point容易, translate到subview的坐标系中遇到了一些问题, iOS中此api存在于UIView中, 而Android的View却没有. 搜索一圈, 还是在Android的事件分发的源码中获取答案.
现象:
<img src="http://blog.yourdream.cc/usr/uploads/2016/03/4071683902.png" alt="A5809894-B554-433E-B603-172DC01AEB93.png" /></p>

<p>代码:
<img src="http://blog.yourdream.cc/usr/uploads/2016/03/2280097835.png" alt="B7B8A792-4D22-4EDF-B672-A96C1A5FCCA4.png" /></p>

<p>布局代码:</p>

<p><img src="http://blog.yourdream.cc/usr/uploads/2016/03/2828618216.png" alt="007A1AED-36E2-4A51-B5CA-7970D56DC40C.png" /></p>

<p>结果:
<img src="http://blog.yourdream.cc/usr/uploads/2016/03/240624671.png" alt="2C8C9B9F-FD20-4986-BE8B-BAAA346943FD.png" /></p>

<p>部分解释:
代码部分借鉴了Android源码.
<img src="http://blog.yourdream.cc/usr/uploads/2016/03/3174007967.png" alt="069605CE-BF37-4BDA-B054-0514E4090EA4.png" /></p>

<ol>
<li>先deep copy出一份新的event.</li>
<li>设置event的offsetLocation.</li>
<li>给event应用subview的inverse matrix.</li>
<li>还有很多类似对应的属性(后边继续学习, 本次没有用到)</li>
</ol>


<p> 然后event就被成功的转换到旋转后的view的坐标系中(斜着的), 原点是左上角.</p>

<p>遇到的问题:</p>

<ul>
<li>ev.offsetLocation: 因为我是在activity中override onTouchEvent, 所以在计算deltaX和deltaY的时候先减去了relativeLayout距离window的x和y, 再减去了demoTextView的left和top. 1.为什么不直接减去demoTextView距离window的x和y? 因为我发现, demoTextView被旋转之后, 它的left/top/right/bottom并没有改变, 从现象的截图里我们也可以看出. 而demoTextView.getLocationInWindow获取的point却是旋转之后的值, 从log中可以看出. 2.为什么不减去relativeLayout的left和top, 而是减去距离window的x和y? 因为relativeLayout只是activity的contentView, 外层还有多少ViewGroup是未知, 所以直接减去距离window的x和y.</li>
<li>ev.transform: 源码里面的写法是<code>transformedEvent.transform(child.getInverseMatrix());</code>, 而我自己去调用<code>demoTextView.getInverseMatrix()</code>的时候, 一直报错, 而且API文档中并没有这个方法, 所以就直接去Matrix的类里面去搜关键词<code>inverse</code>, 发现有这样的方法可以使用.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charles+Surge解决抓包和翻墙的冲突问题]]></title>
    <link href="http://lvpengwei.github.io//blog/2016/02/16/charles-plus-surgejie-jue-zhua-bao-he-fan-qiang-de-chong-tu-wen-ti/"/>
    <updated>2016-02-16T23:34:49+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2016/02/16/charles-plus-surgejie-jue-zhua-bao-he-fan-qiang-de-chong-tu-wen-ti</id>
    <content type="html"><![CDATA[<p>平常做iOS开发的时候经常使用<code>ShadowsocksX</code>来翻墙查资料, 使用<code>Charles</code>来抓包debug. 但是两个软件不能同时开, 一直想不到什么好的解决办法.</p>

<p><code>Surge</code>特点是: 支持翻墙, 但是抓包的request和response不够详细.
Mac版的Surge还要自己配置<code>Web Proxy(HTTP)</code>和<code>Secure Web Proxy(HTTPS)</code>.</p>

<p>然后我就查了一下<code>Charles</code>的菜单, 发现了<code>External Proxy Setting</code>, 然后发现刚好支持<code>Web Proxy(HTTP)</code>和<code>Secure Web Proxy(HTTPS)</code>, 配好调试, 果然成功. 然后手机上再设置成<code>Charles</code>的<code>Web Proxy(HTTP)</code>, 也是可以抓包和翻墙的.</p>

<p><code>Charles</code>特点是: 抓包的request和response很详细, 但是<code>External Proxy Setting</code>支持的protocol比较少.</p>

<p><code>Charles</code>和<code>Surge</code>结合起来就很完美的解决了我这个问题.</p>

<p>再简化一步, 就直接用手机上的<code>Surge</code>生成一个<code>Web Proxy(HTTP)</code>的config, 这样就不用每次去系统设置里手动设置了(每次敲好麻烦), 这样每次进入公司, 电脑上开着<code>Charles</code>和Mac版的<code>Surge</code>, 手机上起着<code>Surge</code>, 两个设备都可以被抓包和翻墙, 妈妈再也不用担心我在<code>ShadowsocksX</code>和<code>Charles</code>这两个软件之间来回切换了.</p>

<p>附几张比较重要的图:
<code>Charles</code>的<code>External Proxy Setting</code>
<img src="http://blog.yourdream.cc/usr/uploads/2016/02/3866250793.png" alt="51F279D2-6924-4BB8-A230-48C693F2CE96.png" /></p>

<p>手机上的Surge的<code>Web Proxy(HTTP)</code>的config
<img src="http://blog.yourdream.cc/usr/uploads/2016/02/567163980.png" alt="IMG_1261.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charles Map Local功能实现接口本地调试]]></title>
    <link href="http://lvpengwei.github.io//blog/2016/01/17/charles-map-localgong-neng-shi-xian-jie-kou-ben-di-diao-shi/"/>
    <updated>2016-01-17T14:31:17+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2016/01/17/charles-map-localgong-neng-shi-xian-jie-kou-ben-di-diao-shi</id>
    <content type="html"><![CDATA[<p>找到指定接口
<img src="http://blog.yourdream.cc/usr/uploads/2016/01/1856358483.jpeg" alt="8FC03A50-82B0-4EF5-A8B0-2B9A4677B151.jpeg" /></p>

<p>右击链接, 出现菜单, 选择Map Local&hellip;; 修改query和Local Path
<img src="http://blog.yourdream.cc/usr/uploads/2016/01/2348193668.jpeg" alt="FD22D43A-AF1D-4C2C-994B-9385FC011E46.jpeg" /></p>

<p>选择顶部菜单Tools->Rewrite&hellip;, 并添加新的Rule
<img src="http://blog.yourdream.cc/usr/uploads/2016/01/4070059063.jpeg" alt="078F326F-E5FD-4FF4-8ECF-2433B325C052.jpeg" /></p>

<p>编辑新的Rule
<img src="http://blog.yourdream.cc/usr/uploads/2016/01/1196373639.jpeg" alt="6760FEA7-12FE-4F0A-B3C4-562C290738C5.jpeg" /></p>

<p>结果
<img src="http://blog.yourdream.cc/usr/uploads/2016/01/1097008502.jpeg" alt="B38D253F-CB3B-4719-BAEC-0CC626FC6290.jpeg" /></p>

<p><img src="http://blog.yourdream.cc/usr/uploads/2016/01/2757025431.jpeg" alt="E397F8AC-D864-40DF-ACA5-60753D5D60FD.jpeg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[穿衣助手iOS团队开发流程转变]]></title>
    <link href="http://lvpengwei.github.io//blog/2015/12/29/chuan-yi-zhu-shou-iostuan-dui-kai-fa-liu-cheng-zhuan-bian/"/>
    <updated>2015-12-29T22:18:57+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2015/12/29/chuan-yi-zhu-shou-iostuan-dui-kai-fa-liu-cheng-zhuan-bian</id>
    <content type="html"><![CDATA[<h2>原来的开发模式</h2>

<p>团队使用敏捷开发模式</p>

<p>Git Workflow: 使用<a href="https://www.atlassian.com/git/tutorials/comparing-workflows/centralized-workflow">Centralized Workflow</a>.</p>

<p>测试: Push Event Hook编译最新版本.</p>

<p>安装: 使用itms-services链接安装APP, 一个静态的html, <a href="https://ios.ichuanyi.me/">iOS测试版本原来的页面</a></p>

<!--more-->


<h3>出现的问题</h3>

<ul>
<li>站会人多, 很多与自己不相关的东西, 浪费时间</li>
<li>发版本时间变长(2星期 -> 一个月)</li>
</ul>


<h2>调整</h2>

<p>整个开发团队是敏捷开发模式, 但是随着业务增加, 需要多条业务线来保证开发任务可控.
 每条业务线一个小团队(产品/开发/QA), 每个小团队也是采用敏捷开发模式.</p>

<h2>开发</h2>

<ul>
<li>整体采用<a href="https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow">Feature Branch Workflow</a>, 一条develop, 多条feature.</li>
<li>每个feature一个小团队(产品/开发/QA)</li>
<li>每个feature branch采用<a href="https://www.atlassian.com/git/tutorials/comparing-workflows/centralized-workflow">Centralized Workflow</a>.</li>
<li>使用gitlab来做code review.</li>
</ul>


<h2>持续集成</h2>

<ul>
<li>QA使用Jenkins编译自己需要的feature branch</li>
<li>Jenkins编译完成之后将IPA上传到HTTPS服务器, 根据IPA名字生成一个html, 使用itms-services链接安装APP</li>
</ul>


<h2>穿衣助手实现方式</h2>

<p><a href="https://github.com/lvpengwei/iOS-download-manifest">根据IPA名字生成不同的items-services链接</a></p>

<p><a href="https://ios.ichuanyi.me/feature/iPhone/html/index.html">穿衣助手测试版本安装(feature branch版)</a></p>

<h2>参考</h2>

<p><a href="https://git-scm.com/doc">Git - Documentation</a></p>

<p><a href="https://www.atlassian.com/git/tutorials/comparing-workflows/">Git Workflows and Tutorials</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS应用中如何获取启动图]]></title>
    <link href="http://lvpengwei.github.io//blog/2015/12/23/iosying-yong-zhong-ru-he-huo-qu-qi-dong-tu/"/>
    <updated>2015-12-23T10:32:14+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2015/12/23/iosying-yong-zhong-ru-he-huo-qu-qi-dong-tu</id>
    <content type="html"><![CDATA[<p>可以在文档中搜索<code>UILaunchImages</code>和<code>UILaunchImageFile</code>这两个关键字。</p>

<!--more-->


<p>前提:使用.xcassets配置LaunchImage。
1.设备系统为iOS7以上，可以通过遍历由<code>UILaunchImages</code>取出来的dict，根据当前尺寸、系统和方向获取名字。key为<code>UILaunchImageName</code>, <code>UILaunchImageMinimumOSVersion</code>, <code>UILaunchImageSize</code>, <code>UILaunchImageOrientation</code>。
<img src="http://blog.yourdream.cc/usr/uploads/2015/04/2453186553.png" alt="E5589B97-D7D4-4B6B-B648-0F9D15FEBFA2.png" />
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/453113142.png" alt="5B51C674-18CC-408C-A394-53ED00E5849F.png" />
2.设备系统为iOS6及以下，可以通过<code>UILaunchImageFile</code>取出启动图名字，在配上一些参数获取。
* iPhone5拼上<code>-568h</code>
* iPad拼上<code>Portrait</code>或者<code>Landscape</code>
* 其他直接用启动图名字
<img src="http://blog.yourdream.cc/usr/uploads/2015/04/2656813522.png" alt="C8D35976-AE29-4601-A4BB-45E24826BDCB.png" />
最后，分析一下.xcassets的配置和打进bundle中素材的对应关系
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/3287509698.png" alt="D8BBA614-CC66-4DE1-A01D-DEE798E2A549.png" />
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/3750565276.png" alt="053E1411-BC46-404B-8153-564749A1EBEC.png" /></p>

<p>iOS8 and Later中的素材分别对应的是iPhone6和6p的尺寸，所以名字是<code>LaunchImage-800-667h@2x.png</code>和<code>LaunchImage-800-Portrait-736h@3x.png</code>(因为6p可以横向，所以带有<code>Portrait</code>，不过事例中没有勾选设置)</p>

<p>iOS7 and Later中<code>iPhone</code>的<code>Portrait</code>生成的素材是<code>LaunchImage-700@2x.png</code>和<code>LaunchImage-700-568h@2x.png</code>
<code>iPad</code>的<code>Portrait</code>生成的素材是<code>LaunchImage-700-Portrait@2x~ipad.png</code>和<code>LaunchImage-700-Portrait~ipad.png</code></p>

<p>iOS6.0 and Later中<code>iPhone</code>的<code>Portrait</code>生成的素材是<code>LaunchImage-568h@2x.png</code>, <code>LaunchImage@2x.png</code>和<code>LaunchImage.png</code>
<code>iPad</code>的<code>Portrait</code>生成的素材是<code>LaunchImage-Portrait@2x~ipad.png</code>和<code>LaunchImage-Portrait~ipad.png</code></p>

<p><a href="https://github.com/lvpengwei/LVLaunchImage">项目地址</a></p>

<p><a href="http://blog.yourdream.cc/2015/03/28/119.html">本篇博客另外地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS错误日志分析]]></title>
    <link href="http://lvpengwei.github.io//blog/2015/12/23/ioscuo-wu-ri-zhi-fen-xi/"/>
    <updated>2015-12-23T10:20:55+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2015/12/23/ioscuo-wu-ri-zhi-fen-xi</id>
    <content type="html"><![CDATA[<p>穿衣助手iOS使用umeng来做错误日志统计，下面介绍一下如何通过lldb和错误日志定位崩溃位置。</p>

<!--more-->


<p>1.首先，启一个终端，输入<code>lldb</code>，回车。进入lldb模式。如图
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/1979910195.png" alt="F91A0BB9-84B4-4BAE-8F11-FF937DEF0CC0.png" /></p>

<p>2.输入<code>target create --no-dependents --arch armv7 'path'</code>，此处path是指可执行文件CYZS的位置，路径大概是<code>~/CYZS\ 1-27-15,\ 9.49\ AM.xcarchive/dSYMs/CYZS.app.dSYM/Contents/Resources/DWARF/CYZS</code>,armv7根据错误日志所记录进行改变，执行即可，如图
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/2077915295.png" alt="DC2A5FFA-6CE8-4EC2-B189-BB26BADE3A2B.png" /></p>

<p>3.使用<code>image lookup --address '地址'</code>进行定位。umeng日志如图:
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/4132646907.png" alt="1E31F2DA-9035-4C3C-BCF0-CC0DF28C4502.png" /></p>

<p>然后复制那些前面标有我们APP名称的地址
<img src="http://blog.yourdream.cc/usr/uploads/2015/03/1195208596.png" alt="407AAE6A-E111-4171-92A8-32BF1F461881.png" /></p>

<p>Update : 2015-04-23
umeng中64位crash的log中发现slide address跟以前的不一样，所以不能正确的定位crash的地址。
解决方法是在第二步之后输入<code>image list</code>看是否有与umeng中一致的地址，若没有则输入<code>target modules load --file 'path' __TEXT 0x429496729616</code>重设即可。</p>

<p><img src="http://blog.yourdream.cc/usr/uploads/2015/04/612599683.png" alt="asdfasdfa.png" /></p>

<p><a href="http://blog.yourdream.cc/2015/03/06/107.html">本篇博客另外地址</a></p>

<p>参照
<a href="http://lldb.llvm.org/symbolication.html">The LLDB Debugger</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Git]]></title>
    <link href="http://lvpengwei.github.io//blog/2014/03/10/learn-git/"/>
    <updated>2014-03-10T17:55:47+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2014/03/10/learn-git</id>
    <content type="html"><![CDATA[<h1>学习git之后的总结(心得)</h1>

<p>之前骊住项目管理是用svn，后来服务器中项目丢失，导致svn无法再进行管理项目，又通过github发现git的强大。于是用了2天时间自学git基础，之后断断续续用了一周时间去实践搭建git服务器。</p>

<hr />

<h2>git心得(注意事项)</h2>

<p>1.添加删除文件：一个团队中，若某个队员要添加或删除一些文件，操作如下</p>

<blockquote><p><strong>NOTE:</strong></p>

<ul>
<li>在添加之前，在分支中commit所做的修改，然后切换到master中pull下最新的项目(project.pbxproj有改变的话会导致冲突，可把本地项目中的这个文件先拉到桌面，然后再poll)</li>
<li>开始添加或删除文件</li>
<li>push到服务器(包括工程文件project.pbxproj和添加或删除的文件)<br/>
然后其他队员也要进行添加或删除操作时，进行同样的步骤</li>
</ul>
</blockquote>

<p>2.尽量多建分支(branch)<br/>
3.把一次功能修改的文件分多次提交(主要是为了更加详细，清楚都进行了哪些操作)  这个是在代码中注释的另一种体现</p>

<p>2014-05-15 更新</p>

<p>xcode工程文件冲突解决办法之一：对项目中的文件进行排序。</p>

<p>1.添加排序脚本sort-Xcode-project-file(排序命令：perl -w sort-Xcode-project-file)</p>

<p>2.添加脚本到build phases(可选)</p>

<h2>后记</h2>

<p>git 标准<a href="http://www.gitignore.io/api/xcode,objective-c">gitignore</a>文件(for iOS project)
git 常见冲突 <a href="http://www.shanhh.com/blog/2013/01/30/git_FAQ/">解决方案</a><br/>
git 参考教程 :<br/>
<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000">Git教程 - 廖雪峰的官方网站</a><br/>
<a href="http://git-scm.com/book/zh/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E6%9E%B6%E8%AE%BE%E6%9C%8D%E5%8A%A1%E5%99%A8">Git - 架设服务器</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的第一篇博客]]></title>
    <link href="http://lvpengwei.github.io//blog/2014/03/02/my-first-blog/"/>
    <updated>2014-03-02T15:24:36+08:00</updated>
    <id>http://lvpengwei.github.io//blog/2014/03/02/my-first-blog</id>
    <content type="html"><![CDATA[<p><strong>首先介绍一下blog搭建历程。</strong></p>

<p>博客管理工具：<a href="octopress.org">octopress</a></p>

<p>当然第一步你得先安装并了解Git. (<a href="http://git-scm.com/">Install Git</a>)</p>

<p>首先要安装<strong>ruby</strong>，当初我是通过rvm来安装，后来出现了一堆麻烦，所以就放弃了这条路，改为HomeBrew->rbenv->ruby。基本不需要配置环境。</p>

<p>1.<a href="http://brew.sh/index_zh-cn.html">安装Homebrew</a>
2.<a href="http://octopress.org/docs/setup/rbenv/">安装rbenv</a>：Alternate Installation Using Homebrew<br/>
3.<a href="http://octopress.org/docs/setup/rbenv/">安装Ruby</a>：Install Ruby 1.9.3</p>

<pre><code>ruby --version //查看ruby版本
</code></pre>

<p><strong>安装Octopress</strong></p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress  
</code></pre>

<p>然后安装依赖</p>

<pre><code>gem install bundler
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
</code></pre>

<p>最后安装Octopress</p>

<pre><code>rake install
</code></pre>

<p>简单配置：主要修改_config.yml，这个配置文件都有相应的注释。主要就是改一些博客头，作者名之类的东西。 注意最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。(from <a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">唐巧</a>)</p>

<p><strong>写博客方法</strong></p>

<ul>
<li>rake new_post[‘article name’] 生成博文框架，然后修改生成的文件即可</li>
<li>rake generate 生成静态文件</li>
<li>rake preview 在本机4000端口生成访问内容</li>
<li>rake deploy 发布文件</li>
</ul>


<p>博客内容是采用markdown语法，所以需要熟悉一下常用的标签。我用的是Google Chrome的插件&ndash;Minimalist Markdown Editor</p>

<p><strong>高级配置还没有测试，下次更新！</strong></p>

<p><strong>参考</strong></p>

<ul>
<li><a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></li>
<li><a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">破船之家</a></li>
<li><a href="http://shanewfx.github.io/blog/2012/02/16/bulid-blog-by-octopress/">思考的轨迹</a></li>
<li><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">唐巧的技术博客</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
